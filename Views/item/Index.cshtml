@model IEnumerable<GSoftPosNew.Models.ItemModel>

@{
    ViewData["Title"] = "Item List";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var items = Model?.ToList() ?? new List<GSoftPosNew.Models.ItemModel>();

    // KPIs
    var totalItems = items.Count;
    var totalStock = items.Sum(x => x.Quantity);
    var totalPurchaseValue = items.Sum(x =>
        (x.GetType().GetProperty("PurchasePrice")?.GetValue(x) as decimal? ?? 0m) * x.Quantity);
    var totalSaleValue = items.Sum(x => x.SalePrice * x.Quantity);

    string GetPropStr(object o, string name) =>
        o?.GetType().GetProperty(name)?.GetValue(o)?.ToString();

    // Names only (no numeric fallback)
    var supplierOptions = items
        .Select(i => GetPropStr(i, "SupplierName"))
        .Where(s => !string.IsNullOrWhiteSpace(s))
        .Distinct(StringComparer.OrdinalIgnoreCase)
        .OrderBy(s => s)
        .ToList();

    var categoryOptions = items
        .Select(i => GetPropStr(i, "CategoryName"))
        .Where(c => !string.IsNullOrWhiteSpace(c))
        .Distinct(StringComparer.OrdinalIgnoreCase)
        .OrderBy(c => c)
        .ToList();

    // NEW: flavour options for datalist
    var flavourOptions = items
        .Select(i => GetPropStr(i, "Flavour"))
        .Where(f => !string.IsNullOrWhiteSpace(f))
        .Distinct(StringComparer.OrdinalIgnoreCase)
        .OrderBy(f => f)
        .ToList();
}

<!-- ===== Top Band (Premium) ===== -->
<div class="inv-hero shadow-sm">
    <div class="inv-hero-inner container-fluid">
        <div class="d-flex align-items-center gap-2">
            <i class="fa-solid fa-boxes-stacked text-white"></i>
            <h5 class="mb-0 text-white fw-bold">@ViewData["Title"]</h5>
        </div>
        <div class="small text-white-50 d-none d-md-block">Inventory • Stock • Import/Export</div>
    </div>
    <div class="inv-hero-accent"></div>
</div>

<style>
    body {
        background: #f4f7fb;
    }

    /* full width */
    .container-fluid {
        max-width: 100% !important;
        padding-left: 12px;
        padding-right: 12px;
    }

    /* Top band */
    .inv-hero {
        position: sticky;
        top: 0;
        z-index: 9;
        background: linear-gradient(95deg,#0ea5e9 0%,#4f46e5 55%,#10b981 115%);
    }

    .inv-hero-inner {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 10px 12px;
    }

    .inv-hero-accent {
        height: 4px;
        background: linear-gradient(90deg,#e0f2fe 0%,#ede9fe 50%,#d1fae5 100%);
        opacity: .95;
    }

    .card {
        border-radius: 16px;
        box-shadow: 0 6px 18px rgba(2,6,23,.08);
        overflow: hidden;
        border: 1px solid #e6eaf2;
    }

    .toolbar {
        background: #fff;
        border: 1px solid #e6eaf2;
        border-radius: 16px;
        padding: 10px 12px;
        margin-top: 10px;
    }

        .toolbar .row {
            align-items: center;
        }

    .timebox {
        display: flex;
        align-items: center;
        gap: 10px;
        font-weight: 800;
        color: #0f172a;
    }

        .timebox .sep {
            opacity: .6;
        }

    .kpi-wrap {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        margin-top: 6px;
    }

    .kpi {
        padding: 6px 12px;
        border-radius: 12px;
        font-weight: 800;
        display: flex;
        align-items: center;
        gap: 8px;
        border: 1px solid #eef;
        box-shadow: 0 4px 10px rgba(0,0,0,.03);
    }

    .kpi-items {
        background: #eff6ff;
        color: #1e3a8a;
        border-color: #dbeafe;
    }

    .kpi-stock {
        background: #fffbeb;
        color: #92400e;
        border-color: #fde68a;
    }

    .kpi-purchase {
        background: #ecfdf5;
        color: #065f46;
        border-color: #a7f3d0;
    }

    .kpi-sale {
        background: #fef2f2;
        color: #991b1b;
        border-color: #fecaca;
    }

    .chip {
        padding: 6px 12px;
        border-radius: 999px;
        background: #fff;
        border: 1px solid #dbe1ea;
        font-weight: 800;
        cursor: pointer;
        white-space: nowrap;
    }

        .chip.active {
            background: #2563eb;
            color: #fff;
            border-color: #2563eb;
        }

    /* Inputs with icon */
    .input-ico {
        position: relative;
        display: flex;
        align-items: center;
        background: #fff;
        border: 1px solid #e1e5ee;
        border-radius: 10px;
        min-height: 36px;
        padding-left: 34px;
        overflow: hidden;
    }

        .input-ico > i {
            position: absolute;
            left: 10px;
            color: #2563eb;
            opacity: .9;
            font-size: .95rem;
        }

        .input-ico input {
            border: none;
            outline: none;
            height: 34px;
            padding: .2rem .6rem;
            flex: 1;
            background: transparent;
            min-width: 220px;
        }

    .type-input {
        height: 34px;
        border: none;
        outline: none;
        width: 100%;
        min-width: 180px;
    }

    /* Suggest popup */
    .suggest {
        position: absolute;
        top: 110%;
        left: 0;
        right: 0;
        z-index: 20;
        display: none;
        background: #fff;
        border: 1px solid #e6eaf2;
        border-radius: 10px;
        box-shadow: 0 10px 24px rgba(2,6,23,.08);
        max-height: 280px;
        overflow: auto;
    }

    .sug-item {
        padding: .55rem .7rem;
        display: flex;
        justify-content: space-between;
        gap: .75rem;
        cursor: pointer;
    }

        .sug-item:hover {
            background: #f5f7fb;
        }

    .s-name {
        font-weight: 800;
        color: #0f172a;
    }

    .s-meta {
        font-size: .85rem;
        color: #667085;
    }

    .btn-mini {
        height: 36px;
        border-radius: 10px;
        padding: 0 .7rem;
        font-weight: 800;
        border: 1px solid #dbeafe;
        color: #1e3a8a;
        background: #eff6ff;
        display: inline-flex;
        align-items: center;
        gap: .45rem;
    }

        .btn-mini:hover {
            background: #e0efff;
        }

    .btn-split {
        position: relative;
    }

        .btn-split .drop {
            position: absolute;
            top: 110%;
            right: 0;
            min-width: 200px;
            background: #fff;
            color: #0f172a;
            border: 1px solid #e6eaf2;
            border-radius: 12px;
            box-shadow: 0 12px 28px rgba(2,6,23,.12);
            display: none;
            overflow: hidden;
        }

        .btn-split.open .drop {
            display: block;
        }

    .drop a, .drop button, .drop label {
        display: flex;
        align-items: center;
        gap: .5rem;
        width: 100%;
        padding: .6rem .8rem;
        background: #fff;
        border: 0;
        text-align: left;
    }

        .drop a:hover, .drop button:hover, .drop label:hover {
            background: #f5f7fb;
            cursor: pointer;
        }

    .btn-add {
        background: #0ea5e9;
        color: #fff;
        border: none;
        padding: 8px 14px;
        border-radius: 10px;
        font-weight: 800;
        display: flex;
        align-items: center;
        gap: 6px;
        white-space: nowrap;
    }

        .btn-add:hover {
            filter: brightness(.95);
        }

    .table-responsive {
        border: 1px solid #e6eaf2;
        background: #fff;
        border-radius: 16px;
        overflow: hidden;
    }

    .table thead th {
        background: #f9fafb;
        font-weight: 800;
    }

    .table td {
        vertical-align: middle;
    }

    .num {
        text-align: right;
    }

    .code-badge {
        display: inline-block;
        padding: .28rem .55rem;
        border-radius: 999px;
        background: #f6ecfa;
        color: #6b21a8;
        border: 1px solid #e6d5e7;
        font-weight: 800;
        font-size: .85rem;
    }

    .status-badge {
        display: inline-block;
        padding: .28rem .55rem;
        border-radius: 999px;
        font-weight: 800;
        font-size: .8rem;
        border: 1px solid transparent;
    }

    .s-ok {
        background: #ecfdf5;
        color: #065f46;
        border-color: #a7f3d0;
    }

    .s-low {
        background: #fef2f2;
        color: #991b1b;
        border-color: #fecaca;
    }

    .s-exp {
        background: #fffbeb;
        color: #92400e;
        border-color: #fde68a;
    }

    .btn-icon {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 34px;
        height: 34px;
        border-radius: 10px;
        border: 1px solid #e6eaf2;
        background: #fff;
        color: #0f172a;
        transition: background .15s, transform .04s;
    }

        .btn-icon:active {
            transform: translateY(1px);
        }

    .btn-edit {
        border-color: #93c5fd;
        color: #1d4ed8;
    }

        .btn-edit:hover {
            background: #e0f2fe;
        }

    .btn-del {
        border-color: #fecaca;
        color: #b91c1c;
    }

        .btn-del:hover {
            background: #fee2e2;
        }

    .pager-bar {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 10px;
        padding: 10px 12px;
        background: #fff;
        border: 1px solid #e6eaf2;
        border-radius: 16px;
        margin-top: 10px;
    }

    .pager-left {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .pager-pages {
        display: flex;
        flex-wrap: wrap;
        gap: 6px;
    }

    .page-btn {
        min-width: 34px;
        height: 34px;
        border-radius: 10px;
        border: 1px solid #e6eaf2;
        background: #fff;
        font-weight: 700;
    }

        .page-btn.active {
            background: #2563eb;
            color: #fff;
            border-color: #2563eb;
        }

    .page-nav {
        padding: 0 10px;
        height: 34px;
        border-radius: 10px;
        border: 1px solid #e6eaf2;
        background: #fff;
        font-weight: 700;
    }

    .btn-bottom {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        padding: 12px 14px;
        background: #fff;
        border: 1px solid #e6eaf2;
        border-radius: 16px;
        margin-top: 10px;
    }

    .btn-action {
        padding: 9px 14px;
        border: none;
        border-radius: 10px;
        font-weight: 800;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .btn-print {
        background: #2563eb;
        color: #fff;
    }

    .btn-clear {
        background: #facc15;
        color: #000;
    }

    .btn-exit {
        background: #ef4444;
        color: #fff;
    }

    @@media print {
        .inv-hero, .toolbar, .pager-bar, .btn-bottom {
            display: none !important;
        }

        .table-responsive {
            border: none;
        }

        body {
            background: #fff;
        }
    }
</style>

<div class="container-fluid my-3">
    <!-- Row 1: Time/Date + KPIs + Low stock -->
    <div class="toolbar">
        <div class="row g-2">
            <div class="col-md-8">
                <div class="timebox">
                    <i class="fa-regular fa-clock"></i>
                    <span id="nowTime">--:--:--</span>
                    <span class="sep">•</span>
                    <i class="fa-regular fa-calendar"></i>
                    <span id="nowDate">--/--/----</span>
                </div>
                <div class="kpi-wrap">
                    <div class="kpi kpi-items"><i class="fa-solid fa-list"></i> Items: @totalItems</div>
                    <div class="kpi kpi-stock"><i class="fa-solid fa-cubes"></i> Stock: @totalStock</div>
                    <div class="kpi kpi-purchase"><i class="fa-solid fa-cart-arrow-down"></i> Purchase: @totalPurchaseValue.ToString("N2")</div>
                    <div class="kpi kpi-sale"><i class="fa-solid fa-sack-dollar"></i> Sale: @totalSaleValue.ToString("N2")</div>
                </div>
            </div>
            <div class="col-md-4 d-flex justify-content-md-end justify-content-start align-items-start">
                <div id="chipLow" class="chip"><i class="fa-solid fa-triangle-exclamation"></i> Low Stock (≤5)</div>
            </div>
        </div>

        <!-- Row 2: Search + Flavour + Supplier + Category + Import/Export + Add -->
        <div class="row g-2 mt-2">
            <!-- Item search -->
            <div class="col-lg-3 col-md-4">
                <div class="input-ico" style="position:relative" title="Search by item name, code, or barcode">
                    <i class="fa-solid fa-magnifying-glass"></i>
                    <input id="itemSearch" type="text" placeholder="Search item..." autocomplete="off" />
                    <div id="suggestList" class="suggest"></div>
                </div>
            </div>

            <!-- NEW: Flavour search -->
            <div class="col-lg-2 col-md-3">
                <div class="input-ico" title="Search by Flavour">
                    <i class="fa-solid fa-ice-cream"></i>
                    <input id="flavourSel" class="type-input" list="flavourList" placeholder="Flavour..." />
                    <datalist id="flavourList">
                        @foreach (var f in flavourOptions)
                        {
                            <option value="@f"></option>
                        }
                    </datalist>
                </div>
            </div>

            <!-- Supplier -->
            <div class="col-lg-2 col-md-3">
                <div class="input-ico" title="Filter by Supplier">
                    <i class="fa-solid fa-truck-field"></i>
                    <input id="supplierSel" class="type-input" list="supplierList" placeholder="Supplier..." />
                    <datalist id="supplierList">
                        @foreach (var s in supplierOptions)
                        {
                            <option value="@s"></option>
                        }
                    </datalist>
                </div>
            </div>

            <!-- Category -->
            <div class="col-lg-2 col-md-3">
                <div class="input-ico" title="Filter by Category">
                    <i class="fa-solid fa-shapes"></i>
                    <input id="categorySel" class="type-input" list="categoryList" placeholder="Category..." />
                    <datalist id="categoryList">
                        @foreach (var c in categoryOptions)
                        {
                            <option value="@c"></option>
                        }
                    </datalist>
                </div>
            </div>

            <!-- Import/Export + Add -->
            <div class="col-lg-3 col-md-3 d-flex gap-2 justify-content-md-end justify-content-start">
                <div class="btn-split" id="exportSplit">
                    <button type="button" class="btn-mini" id="btnExport"><i class="fa-solid fa-file-export"></i> Export</button>
                    <div class="drop">
                        <button type="button" id="expCsv"><i class="fa-solid fa-file-csv"></i> CSV / Excel</button>
                        <button type="button" id="expPdf"><i class="fa-solid fa-file-pdf"></i> PDF (Print)</button>
                        <button type="button" id="expCopy"><i class="fa-regular fa-copy"></i> Copy Table</button>
                    </div>
                </div>

                <div class="btn-split" id="importSplit">
                    <button type="button" class="btn-mini" id="btnImport"><i class="fa-solid fa-file-import"></i> Import</button>
                    <div class="drop">
                        <label style="padding:.55rem .8rem; display:block; cursor:pointer;">
                            <i class="fa-solid fa-file-csv"></i> Import CSV
                            <input type="file" id="importFile" accept=".csv" style="display:none;">
                        </label>
                    </div>
                </div>

                <button class="btn-add" onclick="window.location.href='@Url.Action("Add", "Item")'">
                    <i class="fa-solid fa-plus"></i> Add
                </button>
            </div>
        </div>
    </div>

    <!-- Table -->
    <div class="table-responsive mt-2">
        <table class="table table-hover table-bordered mb-0" id="itemsTable">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Item Code</th>
                    <th>Item Name</th>
                    <!-- NEW: Flavour column -->
                    <th>Flavour</th>
                    <th>Category</th>
                    <th>Supplier</th>
                    <th class="num">Purchase Price (Cost Price)</th>
                    <th class="num">Sale Price</th>
                    <th class="num">Stock</th>
                    <th>Status</th>
                    <th style="width:110px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in items)
                {
                    var isLow = item.Quantity <= item.LowStockThreshold;
                    var isExp = item.ExpiryDate.HasValue && item.ExpiryDate.Value < DateTime.Today;

                    var barcode = GetPropStr(item, "Barcode") ?? "";
                    var purchase = (decimal)(item.GetType().GetProperty("PurchasePrice")?.GetValue(item) ?? 0m);
                    var flav = GetPropStr(item, "Flavour") ?? "";

                    <tr data-name="@item.ItemName"
                        data-code="@item.ItemCode"
                        data-barcode="@barcode"
                        data-sale="@item.SalePrice.ToString("0.####")"
                        data-purchase="@purchase.ToString("0.####")"
                        data-supplier="@item.Supplier.SupplierName"
                        data-category="@item.Category.Name"
                        data-flavour="@flav"
                        data-qty="@item.Quantity">
                        <td>@item.Id</td>
                        <td><span class="code-badge">@item.ItemCode</span></td>
                        <td>@item.ItemName</td>
                        <td>@flav</td>
                        <td>@item.Category.Name</td>
                        <td>@item.Supplier.SupplierName</td>
                        <td class="num">@purchase.ToString("N2")</td>
                        <td class="num">@item.SalePrice.ToString("N2")</td>
                        <td class="num @(isLow ? "text-danger" : "")">
                            @item.Quantity pcs

                            @if (item.PackSize != null && Convert.ToInt32(item.PackSize) != 0)
                            {
                                var packSizeInt = Convert.ToInt32(item.PackSize);
                                <text> (@(item.Quantity / packSizeInt) Packs)</text>
                            }
                        </td>
                        <td>
                            @if (isLow)
                            {
                                <span class="status-badge s-low">Low Stock</span>
                            }
                            else
                            {
                                <span class="status-badge s-ok">In Stock</span>
                            }
                            @if (isExp)
                            {
                                <span class="status-badge s-exp ms-1">Expired</span>
                            }
                        </td>
                        <td>
                            <div class="d-flex gap-1">
                                <a asp-action="Edit" asp-route-id="@item.Id" class="btn-icon btn-edit" title="Edit">
                                    <i class="fa-solid fa-pen-to-square"></i>
                                </a>
                                <a asp-action="Delete" asp-route-id="@item.Id" class="btn-icon btn-del"
                                   title="Delete" onclick="return confirm('Are you sure to delete this item?');">
                                    <i class="fa-solid fa-trash-can"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Bar -->
    <div class="pager-bar">
        <div class="pager-left">
            <label class="me-1 fw-bold">Rows:</label>
            <select id="pageSize" class="form-select form-select-sm" style="width:auto;">
                <option value="10">10 (A4 fit)</option>
                <option value="25" selected>25</option>
                <option value="50">50</option>
            </select>
            <span class="ms-2 text-muted small" id="pageInfo"></span>
        </div>
        <div class="pager-right d-flex align-items-center gap-2">
            <button class="page-nav" id="prevPage">&laquo; Prev</button>
            <div class="pager-pages" id="pageNumbers"></div>
            <button class="page-nav" id="nextPage">Next &raquo;</button>
        </div>
    </div>

    <!-- Bottom Buttons -->
    <div class="btn-bottom">
        <button id="btnPrint" class="btn-action btn-print"><i class="fa-solid fa-print"></i> Print</button>
        <button id="btnClear" class="btn-action btn-clear"><i class="fa-solid fa-eraser"></i> Clear</button>
        <button class="btn-action btn-exit" onclick="window.location.href='@Url.Action("Index", "Home")'">
            <i class="fa-solid fa-door-open"></i> Exit
        </button>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" />
}

@section Scripts {
    <script>
        (function(){
            // Time/Date live
            function tick(){
                const n = new Date();
                document.getElementById('nowTime').textContent = n.toLocaleTimeString();
                document.getElementById('nowDate').textContent = n.toLocaleDateString();
            }
            setInterval(tick, 1000); tick();

            const box = document.getElementById('itemSearch');
            const sug = document.getElementById('suggestList');
            const rowsQ = () => Array.from(document.querySelectorAll('#itemsTable tbody tr'));

            const supplierSel = document.getElementById('supplierSel');
            const categorySel = document.getElementById('categorySel');
            const flavourSel  = document.getElementById('flavourSel'); // NEW
            const chipLow = document.getElementById('chipLow');

            // Import/Export menus
            const exportSplit = document.getElementById('exportSplit');
            const importSplit = document.getElementById('importSplit');
            document.getElementById('btnExport').addEventListener('click', ()=> exportSplit.classList.toggle('open'));
            document.getElementById('btnImport').addEventListener('click', ()=> importSplit.classList.toggle('open'));
            document.addEventListener('click', (e)=>{
                if(!e.target.closest('#exportSplit')) exportSplit.classList.remove('open');
                if(!e.target.closest('#importSplit')) importSplit.classList.remove('open');
            });

            // Items cache for suggest
            function buildItems(){
                return rowsQ().map(r=>({
                    el:r,
                    name:(r.dataset.name||'').trim(),
                    code:(r.dataset.code||'').trim(),
                    barcode:(r.dataset.barcode||'').trim(),
                    sale:parseFloat(r.dataset.sale||'0'),
                    supplier:(r.dataset.supplier||'').toLowerCase(),
                    category:(r.dataset.category||'').toLowerCase(),
                    flavour:(r.dataset.flavour||'').toLowerCase(), // NEW
                    qty:parseFloat(r.dataset.qty||'0')
                }));
            }
            let ITEMS = buildItems();

            function showSuggest(list){
                if(!list.length){ sug.style.display='none'; sug.innerHTML=''; return; }
                const html = list.slice(0,12).map(it=>`
                    <div class="sug-item" data-code="${it.code}">
                        <div class="s-name">${it.name}</div>
                        <div class="s-meta">
                            ${it.code ? `<i class="fa-solid fa-hashtag"></i> ${it.code}`:''}
                            ${it.barcode ? ` · <i class="fa-solid fa-barcode"></i> ${it.barcode}`:''}
                        </div>
                    </div>
                `).join('');
                sug.innerHTML = html; sug.style.display = 'block';
            }

            // Pagination state
            const pageSizeSel = document.getElementById('pageSize');
            const pageNumbers = document.getElementById('pageNumbers');
            const pageInfo = document.getElementById('pageInfo');
            const prevPageBtn = document.getElementById('prevPage');
            const nextPageBtn = document.getElementById('nextPage');

            let filteredRows = [];
            let currentPage = 1;

            function getPageSize(){ return parseInt(pageSizeSel.value || '25', 10); }
            function rebuildFilteredRows(){ filteredRows = rowsQ().filter(r => r.style.display !== 'none'); }

            function renderPagination(){
                const total = filteredRows.length;
                const ps = getPageSize();
                const totalPages = Math.max(1, Math.ceil(total / ps));
                if(currentPage > totalPages) currentPage = totalPages;

                pageNumbers.innerHTML = '';
                function makeBtn(p){
                    const b = document.createElement('button');
                    b.className = 'page-btn'+(p===currentPage?' active':'');
                    b.textContent = p;
                    b.addEventListener('click', ()=>{ currentPage=p; applyPaginationOnly(); });
                    return b;
                }
                const windowSize = 5;
                let start = Math.max(1, currentPage - Math.floor(windowSize/2));
                let end = Math.min(totalPages, start + windowSize - 1);
                if(end - start + 1 < windowSize){ start = Math.max(1, end - windowSize + 1); }

                if(start > 1) pageNumbers.appendChild(makeBtn(1));
                for(let p=start; p<=end; p++) pageNumbers.appendChild(makeBtn(p));
                if(end < totalPages) pageNumbers.appendChild(makeBtn(totalPages));

                prevPageBtn.disabled = currentPage<=1;
                nextPageBtn.disabled = currentPage>=totalPages;

                pageInfo.textContent = total ? `Showing ${(currentPage-1)*ps+1}–${Math.min(currentPage*ps,total)} of ${total}` : 'No rows';
            }

            function applyPaginationOnly(){
                const ps = getPageSize();
                const startIdx = (currentPage-1)*ps;
                const endIdx = startIdx + ps - 1;

                filteredRows.forEach((r,i)=>{
                    r.style.display = (i>=startIdx && i<=endIdx) ? '' : 'none';
                });

                renderPagination();
            }

            // Filters + search (WITH flavour)
            function applyFilters(){
                const q    = (box.value||'').toLowerCase().trim();
                const supp = (supplierSel.value||'').toLowerCase().trim();
                const cat  = (categorySel.value||'').toLowerCase().trim();
                const flav = (flavourSel.value||'').toLowerCase().trim(); // NEW
                const wantLow = chipLow.classList.contains('active');

                let any=false;
                rowsQ().forEach(r=>{
                    const name = (r.dataset.name||'').toLowerCase();
                    const code = (r.dataset.code||'').toLowerCase();
                    const bar  = (r.dataset.barcode||'').toLowerCase();
                    const qty  = parseFloat(r.dataset.qty||'0');
                    const rsup = (r.dataset.supplier||'').toLowerCase();
                    const rcat = (r.dataset.category||'').toLowerCase();
                    const rflv = (r.dataset.flavour||'').toLowerCase(); // NEW

                    let ok = true;
                    if(q)      ok = (name.includes(q) || code.includes(q) || bar.includes(q));
                    if(ok && supp) ok = rsup === supp;
                    if(ok && cat)  ok = rcat === cat;
                    if(ok && flav) ok = rflv.includes(flav);   // partial match for flavour
                    if(ok && wantLow) ok = qty <= 5;

                    r.style.display = ok ? '' : 'none';
                    if(ok) any = true;
                });

                let noRow = document.getElementById('noItemsRow');
                if(!any){
                    if(!noRow){
                        document.querySelector('#itemsTable tbody')
                            .insertAdjacentHTML('beforeend',
                                "<tr id='noItemsRow'><td colspan='11' class='text-center text-muted py-3'>No items found</td></tr>");
                    }
                }else if(noRow){ noRow.remove(); }

                rebuildFilteredRows();
                currentPage = 1;
                applyPaginationOnly();
            }

            // Search + suggest events
            box.addEventListener('input', function(){
                const q = (this.value||'').trim().toLowerCase();
                if(!q){ sug.style.display='none'; showSuggest([]); applyFilters(); return; }
                const list = ITEMS.filter(it =>
                    it.name.toLowerCase().includes(q) ||
                    it.code.toLowerCase().includes(q) ||
                    (it.barcode||'').toLowerCase().includes(q)
                );
                showSuggest(list);
                applyFilters();
            });
            sug.addEventListener('click', function(e){
                const row = e.target.closest('.sug-item'); if(!row) return;
                const code = row.getAttribute('data-code');
                const it = ITEMS.find(x=>x.code===code);
                if(it){ box.value = it.code; }
                sug.style.display='none';
                applyFilters();
            });
            box.addEventListener('keydown', function(e){
                if(e.key === 'Enter'){ e.preventDefault(); sug.style.display='none'; applyFilters(); }
                if(e.key === 'Escape'){ sug.style.display='none'; }
            });
            document.addEventListener('click', (e)=>{ if(!e.target.closest('.input-ico')) sug.style.display='none'; });

            // NEW: live flavour filter
            flavourSel.addEventListener('input', applyFilters);

            supplierSel.addEventListener('input', applyFilters);
            categorySel.addEventListener('input', applyFilters);
            chipLow.addEventListener('click', ()=>{ chipLow.classList.toggle('active'); applyFilters(); });

            // Bottom actions
            document.getElementById('btnPrint')?.addEventListener('click', ()=> window.print());
            document.getElementById('btnClear')?.addEventListener('click', ()=>{
                box.value=''; supplierSel.value=''; categorySel.value=''; flavourSel.value='';
                chipLow.classList.remove('active');
                applyFilters();
            });

            // Export helpers
            function tableToCSV(){
                const rows = Array.from(document.querySelectorAll('#itemsTable tr')).filter(r=> r.style.display!=='none');
                return rows.map(row=>{
                    return Array.from(row.querySelectorAll('th,td')).map(cell=>{
                        let t = cell.innerText.replace(/\s+/g,' ').trim();
                        t = t.replaceAll('"','""');
                        return `"${t}"`;
                    }).join(',');
                }).join('\n');
            }
            function downloadBlob(data, filename, type){
                const blob = new Blob([data], {type});
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url; a.download = filename; a.click();
                URL.revokeObjectURL(url);
            }
            document.getElementById('expCsv').addEventListener('click', ()=>{
                const csv = tableToCSV();
                downloadBlob(csv, 'items-export.csv', 'text/csv;charset=utf-8;');
            });
            document.getElementById('expPdf').addEventListener('click', ()=>{ window.print(); });
            document.getElementById('expCopy').addEventListener('click', async ()=>{
                const csv = tableToCSV();
                try{ await navigator.clipboard.writeText(csv); alert('Table copied to clipboard (CSV format).'); }
                catch{ alert('Copy failed.'); }
            });

            // Import (front-end demo)
            document.getElementById('importFile').addEventListener('change', (e)=>{
                const file = e.target.files?.[0]; if(!file) return;
                const reader = new FileReader();
                reader.onload = function(){
                    const text = String(reader.result||'').trim();
                    const lines = text.split(/\r?\n/);
                    if(!lines.length){ return; }
                    const header = lines[0].split(',').map(h=>h.replace(/(^"|"$)/g,'').trim().toLowerCase());
                    const map = (name)=> header.indexOf(name.toLowerCase());
                    const idx = { code: map('itemcode'), name: map('itemname'), cat: map('category'),
                                  sup: map('supplier'), pur: map('purchaseprice'), sale: map('saleprice'), qty: map('quantity'), flav: map('flavour') };
                    const tbody = document.querySelector('#itemsTable tbody');

                    for(let i=1;i<lines.length;i++){
                        const cols = lines[i].match(/("([^"]|"")*"|[^,]+)/g);
                        if(!cols) continue;
                        const get = (j)=> j>=0 ? (cols[j]||'').replace(/(^"|"$)/g,'').replaceAll('""','"').trim() : '';
                        const code = get(idx.code), name = get(idx.name), cat = get(idx.cat), sup = get(idx.sup);
                        const pur = parseFloat(get(idx.pur)||'0')||0; const sale = parseFloat(get(idx.sale)||'0')||0; const qty = parseFloat(get(idx.qty)||'0')||0;
                        const flav = get(idx.flav)||'';

                        const tr = document.createElement('tr');
                        tr.setAttribute('data-name', name);
                        tr.setAttribute('data-code', code);
                        tr.setAttribute('data-barcode','');
                        tr.setAttribute('data-sale', String(sale));
                        tr.setAttribute('data-purchase', String(pur));
                        tr.setAttribute('data-supplier', sup.toString());
                        tr.setAttribute('data-category', cat.toString());
                        tr.setAttribute('data-flavour', flav.toString());
                        tr.setAttribute('data-qty', String(qty));

                        tr.innerHTML = `
                            <td>—</td>
                            <td><span class="code-badge">${code}</span></td>
                            <td>${name}</td>
                            <td>${flav}</td>
                            <td>${cat}</td>
                            <td>${sup}</td>
                            <td class="num">${pur.toFixed(2)}</td>
                            <td class="num">${sale.toFixed(2)}</td>
                            <td class="num">${qty}</td>
                            <td><span class="status-badge ${qty<=5?'s-low':'s-ok'}">${qty<=5?'Low Stock':'In Stock'}</span></td>
                            <td>
                                <div class="d-flex gap-1">
                                    <a class="btn-icon btn-edit" title="Edit"><i class="fa-solid fa-pen-to-square"></i></a>
                                    <a class="btn-icon btn-del" title="Delete"><i class="fa-solid fa-trash-can"></i></a>
                                </div>
                            </td>`;
                        tbody.appendChild(tr);
                    }
                    // refresh caches + filters + pagination
                    ITEMS = buildItems();
                    applyFilters();
                    alert('CSV imported to grid (demo). Backend save not applied.');
                    e.target.value = '';
                };
                reader.readAsText(file);
            });

            // Pager events
            document.getElementById('pageSize').addEventListener('change', ()=>{ currentPage=1; rebuildFilteredRows(); applyPaginationOnly(); });
            document.getElementById('prevPage').addEventListener('click', ()=>{ if(currentPage>1){ currentPage--; applyPaginationOnly(); }});
            document.getElementById('nextPage').addEventListener('click', ()=>{ currentPage++; applyPaginationOnly(); });

            // First render
            applyFilters();
        })();
    </script>
}
