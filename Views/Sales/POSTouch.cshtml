@using System.Text.Json
@model IEnumerable<ItemModel>
@{
    ViewData["Title"] = "Touch POS – Restaurant Fast Food";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var invoiceNo = ViewBag.InvoiceLastDigit;
    var safeModel = Model ?? new List<ItemModel>();
    var itemsJson = JsonSerializer.Serialize(safeModel);
}

@Html.AntiForgeryToken()

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        :root {
            --bg: #f6f8fb;
            --panel: #fff;
            --line: #e7ecf3;
            --ink: #0f172a;
            --muted: #667085;
            --shadow: 0 10px 28px rgba(2,6,23,.06);
            --hdrBlue1: #0ea5e9;
            --hdrBlue2: #3b82f6;
            --hdrBlue3: #60a5fa;
            --yellow-50: #fffbeb;
            --rose-600: #b91c1c;
            --rose-50: #fef2f2;
        }

        * {
            box-sizing: border-box
        }

        body {
            background: var(--bg);
            color: var(--ink)
        }

        .card {
            background: var(--panel);
            border: 1px solid var(--line);
            border-radius: 16px;
            box-shadow: var(--shadow);
            min-height: 0;
            display: flex;
            flex-direction: column
        }

        .soft-input {
            height: 38px;
            border: 1px solid var(--line);
            border-radius: 12px;
            background: #fff;
            padding: 0 .65rem;
            outline: none
        }

            .soft-input:focus {
                box-shadow: 0 0 0 3px #bfdbfe55;
                border-color: #bfdbfe
            }

        .icon-btn {
            width: 36px;
            height: 36px;
            border: 1px solid var(--line);
            border-radius: 10px;
            background: #fff;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            cursor: pointer
        }

        /* Layout: 40% left | 60% right */
        .pos-root {
            display: grid;
            grid-template-columns: 40% 60%;
            gap: 16px;
            min-height: calc(100vh - 80px)
        }

        .left-col {
            display: grid;
            grid-template-rows: 1fr 1fr;
            gap: 10px
        }

        /* Blue header strip with inner white line */
        .pos-left-header {
            position: sticky;
            top: 0;
            z-index: 2;
            border-top-left-radius: 16px;
            border-top-right-radius: 16px;
            display: flex;
            gap: 10px;
            align-items: center;
            padding: 12px 14px;
            color: #fff;
            background: linear-gradient(135deg,var(--hdrBlue1),var(--hdrBlue2) 60%,var(--hdrBlue3));
            border-bottom: 1px solid #dbeafe;
        }

            .pos-left-header::after {
                content: "";
                position: absolute;
                left: 12px;
                right: 12px;
                bottom: -1px;
                height: 6px;
                background: #fff;
                border-radius: 6px 6px 0 0;
                opacity: .9;
            }

        .brand {
            display: flex;
            align-items: center;
            gap: .5rem;
            font-weight: 900
        }

        .left-search {
            margin-left: auto;
            display: flex;
            align-items: center;
            gap: .4rem;
            background: #fff;
            border: 1px solid var(--line);
            border-radius: 12px;
            padding: .25rem .6rem;
            min-width: 240px;
            color: #0b1220
        }

            .left-search input {
                border: none;
                outline: none;
                height: 36px;
                background: transparent;
                flex: 1
            }

        /* Categories (top-left) */
        .cat-pane.card {
            overflow: auto
        }

        .cat-grid {
            padding: 10px 12px;
            display: grid;
            grid-template-columns: repeat(4,1fr);
            gap: 10px
        }

        .cat-btn {
            display: flex;
            align-items: center;
            gap: .6rem;
            padding: .55rem .7rem;
            background: #fff;
            border: 1px solid var(--line);
            border-radius: 12px;
            cursor: pointer;
            font-weight: 800;
            color: #0f172a;
            transition: box-shadow .15s,transform .04s
        }

            .cat-btn:hover {
                box-shadow: 0 0 0 2px #bfdbfe inset
            }

        .cat-thumb {
            width: 38px;
            height: 38px;
            border-radius: 10px;
            object-fit: cover;
            border: 1px solid var(--line)
        }

        .cat-title {
            flex: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis
        }

        .cat-count {
            font-size: .75rem;
            padding: .1rem .45rem;
            border-radius: 999px;
            background: #eef2ff;
            border: 1px solid #dbeafe;
            color: #1e40af
        }

        /* Items (bottom-left) */
        .left-items.card {
            overflow: auto
        }

        .left-items-head {
            display: flex;
            align-items: center;
            gap: 10px;
            justify-content: space-between;
            padding: 10px 12px;
            border-bottom: 1px dashed var(--line);
            flex-wrap: wrap
        }

            .left-items-head h4 {
                margin: 0;
                font-weight: 900;
                color: #0f172a
            }

        .left-items-controls {
            display: flex;
            gap: 8px;
            align-items: center
        }

        .left-items-grid {
            padding: 10px 12px;
            display: grid;
            grid-template-columns: repeat(2,1fr);
            gap: 10px
        }

        .li-card {
            border: 1px solid var(--line);
            border-radius: 14px;
            padding: 10px;
            background: #fff;
            display: flex;
            gap: 10px;
            align-items: center;
            cursor: pointer;
            transition: transform .05s,box-shadow .15s
        }

            .li-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 0 0 2px #bfdbfe inset
            }

        .li-thumb {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            object-fit: cover;
            border: 1px solid var(--line)
        }

        .li-name {
            font-weight: 800;
            color: #0f172a;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis
        }

        .li-meta {
            display: flex;
            gap: 8px;
            color: var(--muted);
            font-size: .9rem
        }

        .price-badge {
            background: var(--yellow-50);
            color: #7c2d12;
            border: 1px solid #fde68a;
            border-radius: 999px;
            padding: .05rem .45rem;
            font-weight: 800
        }

        /* Right: cart & totals */
        .pos-right.card {
            display: flex
        }

        .topbar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 8px;
            padding: 10px 12px;
            border-bottom: 1px dashed var(--line);
            flex-wrap: wrap
        }

        .order-meta {
            display: flex;
            gap: 8px;
            align-items: center;
            flex-wrap: wrap
        }

        .order-no {
            font-weight: 900;
            color: #111827;
            border: 1px dashed #cbd5e1;
            border-radius: 10px;
            padding: .35rem .6rem;
            background: #f8fafc
        }

        .fs-btn {
            height: 38px;
            border: 1px solid #cbd5e1;
            border-radius: 10px;
            background: #fff;
            padding: 0 .65rem;
            font-weight: 800;
            cursor: pointer
        }

        .cart {
            display: flex;
            flex-direction: column;
            min-height: 0;
            padding: 10px 12px 0
        }

        .cart-head {
            display: grid;
            grid-template-columns: 1fr 110px 120px 120px 40px;
            gap: 8px;
            position: sticky;
            top: 0;
            background: #eff6ff;
            border: 1px solid var(--line);
            border-radius: 10px;
            padding: .55rem .6rem;
            font-weight: 800
        }

        .cart-body {
            overflow: auto;
            border: 1px solid var(--line);
            border-radius: 12px;
            margin-top: 8px;
            padding: 4px;
            background: #fff;
            min-height: 220px;
            max-height: 38vh
        }

        .cart-row {
            display: grid;
            grid-template-columns: 1fr 110px 120px 120px 40px;
            gap: 8px;
            align-items: center;
            border-bottom: 1px dashed #eef2f7;
            padding: .5rem .4rem
        }

        .cart-name {
            font-weight: 800;
            color: #0f172a
        }

        .qty-wrap {
            display: flex;
            align-items: center;
            gap: 6px
        }

        .qty-btn {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            border: 1px solid var(--line);
            background: #fff;
            font-weight: 900
        }

        .qty-input {
            width: 50px;
            text-align: center
        }

        .price-input, .line-total {
            height: 36px;
            border: 1px solid var(--line);
            border-radius: 10px;
            padding: 0 .5rem;
            text-align: right;
            background: #fff
        }

        .remove-btn {
            width: 34px;
            height: 34px;
            border-radius: 10px;
            border: 1px solid var(--line);
            background: #fff;
            color: #b91c1c
        }

            .remove-btn:hover {
                background: #fef2f2
            }

        /* Totals */
        .totals {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            padding: 10px 12px
        }

        .t-row {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 10px;
            background: #fff;
            border: 1px solid var(--line);
            border-radius: 12px;
            padding: .55rem .6rem
        }

        .t-inline {
            display: flex;
            gap: 6px;
            align-items: center
        }

        .t-input {
            height: 36px;
            min-width: 90px
        }

        .t-val {
            font-weight: 900;
            color: #0f172a
        }

        .grand {
            background: linear-gradient(90deg,#e0f2fe,#dbeafe);
            border-color: #bfdbfe
        }

        /* Keypad + targets */
        .keypad {
            padding: 2px 12px 10px
        }

        .keypad-head {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 6px 0 10px
        }

        .keypad-title {
            font-weight: 800;
            color: #0f172a
        }

        .pad-targets {
            display: flex;
            align-items: center;
            gap: 10px;
            color: #64748b;
            font-weight: 700
        }

            .pad-targets label {
                display: flex;
                align-items: center;
                gap: 6px
            }

        .pad-grid {
            display: grid;
            grid-template-columns: repeat(4,1fr);
            gap: 8px
        }

            .pad-grid button {
                height: 42px;
                border: 1px solid var(--line);
                background: #fff;
                border-radius: 10px;
                font-weight: 800;
                font-size: 1.05rem
            }

                .pad-grid button.accent {
                    background: #fffaf0;
                    border-color: #fde68a
                }

        /* Action cards */
        .actions-cards {
            display: grid;
            grid-template-columns: repeat(6,1fr);
            gap: 10px;
            padding: 12px;
            border-top: 1px dashed var(--line);
            position: sticky;
            bottom: 0;
            background: var(--panel)
        }

        .act-card {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 6px;
            padding: 10px;
            border: 1px solid var(--line);
            border-radius: 14px;
            background: #fff;
            cursor: pointer;
            font-weight: 800;
            color: #0f172a;
            text-align: center;
            transition: transform .06s, box-shadow .15s
        }

            .act-card i {
                font-size: 18px
            }

            .act-card:hover {
                transform: translateY(-1px);
                box-shadow: 0 0 0 2px #e2e8f0 inset
            }

            .act-card.primary {
                background: #eff6ff;
                border-color: #bfdbfe
            }

            .act-card.warn {
                background: #fffbeb;
                border-color: #fde68a
            }

            .act-card.danger {
                background: #ffeef0;
                border-color: #fecdd3
            }

            .act-card.info {
                background: #f0fdf4;
                border-color: #bbf7d0
            }

        /* Modals */
        .modal[hidden] {
            display: none
        }

        .modal {
            position: fixed;
            inset: 0;
            z-index: 10000
        }

        .modal-backdrop {
            position: absolute;
            inset: 0;
            background: rgba(2,6,23,.35)
        }

        .modal-card {
            position: relative;
            margin: 8vh auto 0;
            max-width: 900px;
            background: #fff;
            border: 1px solid var(--line);
            border-radius: 16px;
            box-shadow: var(--shadow)
        }

        .modal-head {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 14px;
            border-bottom: 1px solid var(--line)
        }

            .modal-head h3 {
                margin: 0;
                font-weight: 900;
                color: #0f172a;
                display: flex;
                gap: 8px;
                align-items: center
            }

        .modal-close {
            width: 36px;
            height: 36px;
            border-radius: 10px;
            border: 1px solid var(--line);
            background: #fff;
            font-size: 20px;
            cursor: pointer
        }

        .modal-body {
            padding: 14px;
            max-height: 60vh;
            overflow: auto
        }

        .hold-list {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 8px
        }

            .hold-list th {
                font-weight: 800;
                color: #334155;
                text-align: left;
                padding: 6px 8px
            }

        .hold-row {
            background: #fff;
            border: 1px solid var(--line);
            border-radius: 12px
        }

            .hold-row td {
                padding: 8px
            }

        .pill {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: .1rem .5rem;
            border-radius: 999px;
            border: 1px solid #e2e8f0;
            background: #f8fafc;
            font-weight: 700
        }

        /* Fullscreen styling */
        #posApp:fullscreen {
            background: #f8fafc;
            padding: 12px;
        }

            #posApp:fullscreen .card {
                border: 1px solid #e5e7eb;
                box-shadow: none;
            }

        /* Print only invoice area */
        @@media print {
            body * {
                visibility: hidden !important;
            }

            #printArea, #printArea * {
                visibility: visible !important;
            }

            #printArea {
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
                padding: 16px;
            }
        }

        /* Responsive */
        @@media (max-width:1280px) {
            .cat-grid {
                grid-template-columns: repeat(3,1fr)
            }
        }

        @@media (max-width:980px) {
            .pos-root {
                grid-template-columns: 1fr
            }

            .cat-grid {
                grid-template-columns: repeat(2,1fr)
            }

            .cart-head, .cart-row {
                grid-template-columns: 1fr 90px 100px 100px 40px
            }

            .actions-cards {
                grid-template-columns: repeat(3,1fr)
            }
        }

        /* Retrieve: stylish */
    .retrieve-modal {
        background: #fff;
        border-radius: 16px;
        box-shadow: 0 30px 80px rgba(2,6,23,.45);
        width: 900px;
        max-width: 96vw;
        max-height: 92vh;
        overflow: auto;
        border: 1px solid #e5e7eb;
    }

    .retrieve-head {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 12px 16px;
        border-bottom: 1px solid #e5e7eb;
        background: var(--grad-2);
    }

        .retrieve-head .title {
            font-weight: 800;
            color: #0b1324;
            display: flex;
            gap: 8px;
            align-items: center;
        }

    .retrieve-toolbar {
        display: flex;
        gap: 8px;
        padding: 10px 16px;
        border-bottom: 1px solid #eef2f7;
        background: #fcfcfd;
    }

    .table-hold th {
        position: sticky;
        top: 0;
        background: #f1f5f9;
    }

    </style>
}

<div id="posApp" class="pos-root">
    <!-- LEFT -->
    <div class="left-col">
        <div class="card">
            <div class="pos-left-header">
                <div class="brand"><i class="fa-solid fa-burger"></i><span>POS – Fast Food</span></div>
                <div class="left-search" title="Search by name or code">
                    <i class="fa-solid fa-magnifying-glass"></i>
                    <input id="itemSearchTop" type="text" placeholder="Search name or code…" autocomplete="off">
                </div>
            </div>
            <div class="cat-pane card"><div id="catGrid" class="cat-grid"></div></div>
        </div>

        <div class="left-items card">
            <div class="left-items-head">
                <h4 id="leftItemsTitle">Items</h4>
                <div class="left-items-controls">
                    <div class="left-search" title="Search by name or code">
                        <i class="fa-solid fa-magnifying-glass"></i>
                        <input id="itemSearchBottom" type="text" placeholder="Search name or code…" autocomplete="off">
                    </div>
                    <label>Sort:</label>
                    <select id="sortSel" class="soft-input" style="height:34px">
                        <option value="name">Name (A–Z)</option>
                        <option value="price_asc">Price (Low → High)</option>
                        <option value="price_desc">Price (High → Low)</option>
                    </select>
                </div>
            </div>
            <div id="leftItemsGrid" class="left-items-grid"></div>
        </div>
    </div>

    <!-- RIGHT -->
    <main class="pos-right card">
        <section id="rightPane" class="pos-main">
            <div class="topbar">
                <div class="order-meta">
                    <span class="order-no">Order # <span id="orderNo">0001</span></span>

                    <select id="orderType" class="soft-input">
                        <option value="dinein">Dine-In</option>
                        <option value="takeaway">Takeaway</option>
                        <option value="delivery">Delivery</option>
                    </select>

                    <input id="tableNo" class="soft-input" placeholder="Table # / Token">
                    <select id="customer" class="soft-input">
                        <option value="">Customer / Phone"</option>
                        @if (ViewBag.Customer != null)
                        {
                            @foreach (var c in ViewBag.Customer)
                            {
                                <option value="@c.Id" data-id="@c.Id">@c.CustomerName</option>
                            }
                        }
                        
                    </select>
                   
                    <button id="addCustomerBtn" class="icon-btn" title="Add/Quick customer"><i class="fa-solid fa-user-plus"></i></button>

                    <select id="waiterSel" class="soft-input">
                        <option value="">Select Waiter</option>
                    </select>
                    <button id="addWaiterBtn" class="icon-btn" title="Add new waiter"><i class="fa-solid fa-plus"></i></button>
                </div>
                <div class="now" style="display:flex;align-items:center;gap:8px">
                    <button id="fsBtn" class="fs-btn" title="Full Screen"><i class="fa-solid fa-up-right-and-down-left-from-center"></i></button>
                    <span id="nowTime"></span><span class="sep">•</span><span id="nowDate"></span>
                </div>
            </div>

            <div class="cart">
                <div class="cart-head">
                    <div class="h-item">Item</div>
                    <div class="h-qty">Qty</div>
                    <div class="h-price">Price</div>
                    <div class="h-total">Total</div>
                    <div class="h-act"></div>
                </div>
                <div id="cartBody" class="cart-body"></div>
            </div>

            <div class="totals">
                <div class="t-row">
                    <label>Tax</label>
                    <div class="t-inline">
                        <input id="tTax" class="soft-input t-input" type="number" step="0.01" value="0">
                        <select id="tTaxType" class="soft-input t-input">
                            <option value="percent">%</option>
                            <option value="flat">PKR</option>
                        </select>
                    </div>
                </div>
                <div class="t-row">
                    <label>Discount</label>
                    <div class="t-inline">
                        <input id="tDisc" class="soft-input t-input" type="number" step="0.01" placeholder="0.00">
                        <select id="tDiscType" class="soft-input t-input">
                            <option value="flat">PKR</option>
                            <option value="percent">%</option>
                        </select>
                    </div>
                </div>
                <div class="t-row grand">
                    <label>Grand Total</label>
                    <div id="tGrand" class="t-val">0.00</div>
                </div>
                <div class="t-row">
                    <label>Cash</label>
                    <div class="t-inline">
                        <input id="tCash" class="soft-input t-input" type="number" step="0.01" placeholder="0.00">
                        <select id="payMode" class="soft-input t-input" title="Mode of Payment">
                            <option value="cash">Cash</option>
                            <option value="card">Card</option>
                            <option value="credit">Credit</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                </div>
                <div class="t-row">
                    <label>Change</label>
                    <div id="tChange" class="t-val">0.00</div>
                </div>
            </div>

            <div class="keypad">
                <div class="keypad-head">
                    <div class="keypad-title">Keypad</div>
                    <div class="pad-targets">
                        <span>Target:</span>
                        <label><input type="radio" name="padTarget" value="qty" checked> Qty</label>
                        <label><input type="radio" name="padTarget" value="price"> Price</label>
                        <label><input type="radio" name="padTarget" value="disc"> Discount</label>
                        <label><input type="radio" name="padTarget" value="cash"> Cash</label>
                    </div>
                </div>
                <div class="pad-grid">
                    <button data-key="7">7</button><button data-key="8">8</button><button data-key="9">9</button><button data-key="C" class="accent">C</button>
                    <button data-key="4">4</button><button data-key="5">5</button><button data-key="6">6</button><button data-key="⌫" class="accent">⌫</button>
                    <button data-key="1">1</button><button data-key="2">2</button><button data-key="3">3</button><button data-key="00">00</button>
                    <button data-key="0">0</button><button data-key=".">.</button><button data-key="100">100</button><button data-key="200">200</button>
                </div>
            </div>

            <div class="actions-cards">
                <div id="acModify" class="act-card info" title="Modify Order"><i class="fa-regular fa-pen-to-square"></i><div>Modify</div></div>
                <div id="acDelete" class="act-card danger" title="Delete Order"><i class="fa-regular fa-trash-can"></i><div>Delete</div></div>
                <div id="acKOT" class="act-card warn" title="KOT Print"><i class="fa-solid fa-utensils"></i><div>KOT</div></div>
                <div id="acPrint" class="act-card primary" title="Print Bill"><i class="fa-solid fa-print"></i><div>Print</div></div>
                <div id="acHold" class="act-card" title="Hold Invoice"><i class="fa-regular fa-bookmark"></i><div>Hold</div></div>
                <div id="acRetrieve" class="act-card" title="Retrieve Held"><i class="fa-regular fa-folder-open"></i><div>Retrieve</div></div>
            </div>
        </section>
    </main>


    <!-- Retrieve Held Modal -->
    <div id="retrieveOverlay" class="modal-overlay" style="display: none;">
        <div class="retrieve-modal">
            <div class="retrieve-head">
                <div class="title"><i class="bi bi-archive"></i> Retrieve Held Invoices</div>
                <button class="btn btn-soft-slate" onclick="closeRetrieveModal()"><i class="bi bi-x-lg"></i></button>
            </div>
            <div class="retrieve-toolbar">
                <div class="input-group" style="max-width:340px;">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                    <input id="holdSearch" type="text" class="form-control" placeholder="Search by invoice #">
                </div>
                <button class="btn btn-soft-gray" onclick="sortHeld('time')"><i class="bi bi-clock"></i> Latest</button>
                <button class="btn btn-soft-gray" onclick="sortHeld('grand')"><i class="bi bi-cash-coin"></i> Grand Total</button>
                <button class="btn btn-soft-amber" onclick="clearAllHeld()"><i class="bi bi-trash3"></i> Clear All</button>
            </div>
            <div class="p-3">
                <div class="table-responsive" style="max-height:60vh;">
                    <table class="table table-hover align-middle table-hold" id="heldTable">
                        <thead>
                            <tr>
                                <th>Invoice #</th>
                                <th>Items</th>
                                <th>Preview</th>
                                <th>Grand</th>
                                <th>Held At</th>
                                <th class="text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="heldTbody"></tbody>
                    </table>
                </div>
                <div id="noHeldRow" class="text-center text-muted py-4" style="display:none;">
                    <i class="bi bi-inbox fs-3 d-block mb-2"></i>No held invoices
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Hidden print container -->
<div id="printArea" style="display:none"></div>

<!-- Hold choice modal -->
<div id="holdModal" class="modal" hidden>
    <div class="modal-backdrop"></div>
    <div class="modal-card">
        <div class="modal-head">
            <h3><i class="fa-regular fa-bookmark"></i> Hold Invoice</h3>
            <button class="modal-close" data-close="hold">&times;</button>
        </div>
        <div class="modal-body">
            <p>Choose an option for current order:</p>
            <div style="display:flex;gap:10px;flex-wrap:wrap">
                <button id="btnHoldOnly" class="act-card" style="min-width:160px"><i class="fa-regular fa-bookmark"></i><div>Hold Only</div></button>
                <button id="btnHoldPrint" class="act-card primary" style="min-width:160px"><i class="fa-solid fa-print"></i><div>Hold &amp; Print</div></button>
            </div>
        </div>
    </div>
</div>



<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

@section Scripts {

    <script>
        const tGrand=document.getElementById('tGrand');
          const tCash=document.getElementById('tCash');
          const tChange=document.getElementById('tChange');
          const tTax=document.getElementById('tTax');
          const tDisc=document.getElementById('tDisc');
          const cartBody=document.getElementById('cartBody');

          const items = @Html.Raw(itemsJson);

          let cart = [];
          /* Totals */
          function recalc(){
            const sub=cart.reduce((a,b)=>a+(b.qty*b.price),0);
            const d=parseFloat(tDisc.value||'0')||0;
            const dType=tDiscType.value;
            const dAmt=(dType==='percent')?(sub*d/100):d;

            const tx=parseFloat(tTax.value||'0')||0;
            const txType=tTaxType.value;
            const txBase=Math.max(0, sub - dAmt);
            const txAmt=(txType==='percent')?(txBase*tx/100):tx;

            const grand=Math.max(0, txBase + txAmt);
            tGrand.textContent=grand.toFixed(2);

            const cash=parseFloat(tCash.value||'0')||0;
            tChange.textContent=Math.max(0, cash - grand).toFixed(2);
          }

        function handleNew(){
          const tb = document.querySelector('#cartBody');
          tb.innerHTML = `<div class="text-muted" style="padding: .6rem;">No items yet. Select from left to add.</div>`;
          
            tChange.textContent="0";
            tGrand.textContent="0";
            tChange.textContent="0";
            tTax.value="0";
            tDisc.value="0";
            tCash.value="0";
          // document.getElementById('invoiceDiscountPercent').value='0';

        }

           

        function cryptoRandomId(){ try{ return [...crypto.getRandomValues(new Uint8Array(8))].map(x=>x.toString(16).padStart(2,'0')).join(''); } catch { return String(Date.now()); } }

        function toast(msg,icon='info',ms=1500){ Swal.fire({toast:true,icon,title:msg,position:'top-end',showConfirmButton:false,timer:ms,timerProgressBar:true}); }

        function hasLineItems(){return !!document.querySelector('.qty-input');}
        function nowIso(){ return new Date().toISOString(); }
        function money(n){return `₨${(n||0).toFixed(2)}`;}

        /* -------- HOLD / RETRIEVE (localStorage) -------- */
        const HOLD_KEY='touchHeldInvoices';
        function getAllHeld(){ try{return JSON.parse(localStorage.getItem(HOLD_KEY)||'[]');}catch{ return []; } }
        function saveAllHeld(list){ localStorage.setItem(HOLD_KEY, JSON.stringify(list)); }
        function holdCurrentInvoice(){
          if(!hasLineItems()) return toast('No items to hold','warning');

              // --- Sale Items from cart rows ---
                const saleItems = Array.from(document.querySelectorAll('.cart-row')).map(row => {
                    const qtyInput = row.querySelector('.qty-input');
                    const priceInput = row.querySelector('.price-input');
                    const qty = parseInt(qtyInput?.value || 0);
                    const price = parseFloat(priceInput?.value || 0);
                    const discount = parseFloat(document.getElementById('tDisc')?.value || 0);
                    const tax = parseFloat(document.getElementById('tTax')?.value || 0);
                    return {
                        ItemId: parseInt(row.dataset.itemId),
                        Quantity: qty,
                        UnitPrice: price,
                        DiscountPercent: discount,
                        TaxAmount: tax,
                        LineTotal: +(qty*price).toFixed(2)
                    };
                });

              const itemsArr = saleItems;
              const invoiceNumber=document.getElementById('orderNo')?.textContent || '';
              const sub=parseFloat(document.getElementById('tGrand')?.textContent.replace(/,/g,'') || 0);
              const tax=parseFloat(document.getElementById('tTax')?.value || 0);
              const disc=parseFloat(document.getElementById('tDisc')?.value || 0);
              const grand=parseFloat(document.getElementById('tGrand')?.textContent.replace(/,/g,'') || 0);
              const held={ id: cryptoRandomId(), invoiceNumber, items: itemsArr, subTotal: sub, discount: disc, tax: tax, grandTotal: grand, heldAt: nowIso() };
              const list=getAllHeld(); 
              list.unshift(held); 
              saveAllHeld(list);

                const orderEl = document.getElementById('orderNo');
                const oldOrderNumber = orderEl.textContent.trim();

                let nextNumber = (parseInt(oldOrderNumber, 10) + 1).toString();
                nextNumber = nextNumber.padStart(oldOrderNumber.length, '0');

                orderEl.textContent = nextNumber;

              toast('Invoice held','success'); handleNew();
        }
        function cryptoRandomId(){ try{ return [...crypto.getRandomValues(new Uint8Array(8))].map(x=>x.toString(16).padStart(2,'0')).join(''); } catch { return String(Date.now()); } }

        function openRetrieveModal(){ document.getElementById('retrieveOverlay').style.display='flex'; renderHeldTable(); document.getElementById('holdSearch').focus(); }
        function closeRetrieveModal(){ document.getElementById('retrieveOverlay').style.display='none'; }
        function renderHeldTable(){
          const tbody = document.getElementById('heldTbody');
          tbody.innerHTML = '';

          const list = getAllHeld();
          const q = (document.getElementById('holdSearch').value || '').trim().toLowerCase();

          const view = list.filter(h => !q || (h.invoiceNumber || '').toLowerCase().includes(q));

          document.getElementById('noHeldRow').style.display = view.length ? 'none' : 'block';

          view.forEach(h => {
            const previewNames = (h.items || [])
              .slice(0, 3)
              .map(it => {
                const meta = (items || []).find(x => x.Id === it.ItemId);
                return meta?.ItemName || it.ItemName || (`Item#${it.ItemId}`);
              })
              .join(', ');

            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td><span class="badge text-bg-light">${h.invoiceNumber}</span></td>
              <td>${h.items?.length || 0}</td>
              <td>${previewNames || '—'}</td>
              <td><strong>${money(h.grandTotal || 0)}</strong></td>
              <td>${new Date(h.heldAt).toLocaleString()}</td>
              <td class="text-end">
                <button class="btn btn-sm btn-soft-green me-1" onclick="retrieveInvoice('${h.id}')">
                  <i class="bi bi-pencil-square"></i> Edit
                </button>
                <button class="btn btn-sm btn-soft-amber" onclick="deleteHeld('${h.id}')">
                  <i class="bi bi-trash3"></i> Delete
                </button>
              </td>`;
            tbody.appendChild(tr);
          });
        }

        function deleteHeld(id){ let list=getAllHeld(); list=list.filter(x=>x.id!==id); saveAllHeld(list); renderHeldTable(); toast('Held invoice deleted','success'); }
        function clearAllHeld(){ Swal.fire({icon:'warning',title:'Clear all held invoices?',showCancelButton:true,confirmButtonText:'Yes, Clear'}).then(r=>{ if(r.isConfirmed){ localStorage.removeItem(HOLD_KEY); renderHeldTable(); toast('All cleared','success'); } }); }
        function sortHeld(by){ let list=getAllHeld(); if(by==='time'){ list.sort((a,b)=> new Date(b.heldAt)-new Date(a.heldAt)); } if(by==='grand'){ list.sort((a,b)=> (b.grandTotal||0)-(a.grandTotal||0)); } saveAllHeld(list); renderHeldTable(); }
        document.getElementById('holdSearch').addEventListener('input', renderHeldTable);

        function retrieveInvoice(id) {
          const list = getAllHeld();
          const h = list.find(x => x.id === id);
          if (!h) {
            toast('Not found', 'error');
            return;
          }


          // render items
          const itemsList = h.items || [];
          if (!itemsList.length) {
            cartBody.innerHTML = `<div class="muted" style="padding:.6rem;">No items yet. Select from left to add.</div>`;
          } else {
            cartBody.innerHTML = itemsList.map((it, idx) => {
              const meta = items.find(x => x.Id === it.ItemId) || {};
              return `
                <div class="cart-row" data-idx="${idx}" data-item-id="${it.ItemId}" data-code="${meta.ItemCode || ''}">
                  <div class="cart-name">${meta.ItemName || 'Unnamed Item'}</div>
                  <div class="qty-wrap">
                    <button class="qty-btn" data-op="dec">−</button>
                    <input class="soft-input qty-input" type="number" step="1" min="1" value="${it.Quantity}">
                    <button class="qty-btn" data-op="inc">+</button>
                  </div>
                  <input class="price-input" type="number" step="0.01" value="${Number(it.UnitPrice).toFixed(2)}">
                  <div class="line-total">${(Number(it.Quantity) * Number(it.UnitPrice)).toFixed(2)}</div>
                  <button class="remove-btn" title="Remove line">
                    <i class="fa-regular fa-trash-can"></i>
                  </button>
                </div>`;
            }).join('');
          }

          // remove retrieved invoice from held list
          saveAllHeld(list.filter(x => x.id !== id));

          const orderEl = document.getElementById('orderNo');
          orderEl.textContent = h.invoiceNumber;

          recalc();

          closeRetrieveModal();
          toast('Invoice retrieved', 'success');
          
        }


        document.getElementById('acHold').addEventListener('click', holdCurrentInvoice);
        document.getElementById('acRetrieve').addEventListener('click', openRetrieveModal);
        // acRetrieve.addEventListener('click', ()=>{ openRetrieveModal(); loadHeldList(); });

        let invoiceCounter = @((invoiceNo ?? 0));
        document.getElementById('orderNo').innerText=generateInvoiceNumber();
        function generateInvoiceNumber(){
            invoiceCounter=(parseInt(invoiceCounter)||0)+1; 
            const counterStr=String(invoiceCounter).padStart(4,'0');
            return `${counterStr}`;
        }

        (function(){
          /* Anti-forgery + fetch helper */
          function antiforgery(){ const el=document.querySelector('input[name="__RequestVerificationToken"]'); return el?el.value:''; }
          async function req(url, data=null, method='POST'){
            const res = await fetch(url, {
              method,
              headers:{
                'Content-Type':'application/json',
                'RequestVerificationToken': antiforgery()
              },
              body: (method==='GET'||method==='DELETE')? null : JSON.stringify(data)
            });
            if(!res.ok){ throw new Error(await res.text() || ('HTTP '+res.status)); }
            const ct = res.headers.get('content-type')||'';
            return ct.includes('application/json')? res.json():{};
          }

          /* Demo data */
          const CATS=[{id:'burgers',title:'Burgers',count:8,img:'https://images.unsplash.com/photo-1550547660-d9450f859349?q=80&w=300&auto=format&fit=crop'},
                      {id:'pizzas',title:'Pizzas',count:6,img:'https://images.unsplash.com/photo-1548365328-9f547fb09550?q=80&w=300&auto=format&fit=crop'},
                      {id:'sides',title:'Sides',count:7,img:'https://images.unsplash.com/photo-1511690656952-34342bb7c2f2?q=80&w=300&auto=format&fit=crop'},
                      {id:'drinks',title:'Drinks',count:9,img:'https://images.unsplash.com/photo-1511920170033-f8396924c348?q=80&w=300&auto=format&fit=crop'},
                      {id:'dessert',title:'Dessert',count:5,img:'https://images.unsplash.com/photo-1499636136210-6f4ee915583e?q=80&w=300&auto=format&fit=crop'},
                      {id:'wraps',title:'Wraps',count:4,img:'https://images.unsplash.com/photo-1604908176997-43162fdf4b36?q=80&w=300&auto=format&fit=crop'},
                      {id:'salads',title:'Salads',count:4,img:'https://images.unsplash.com/photo-1490474418585-ba9bad8fd0ea?q=80&w=300&auto=format&fit=crop'},
                      {id:'special',title:'Specials',count:3,img:'https://images.unsplash.com/photo-1512058564366-18510be2db19?q=80&w=300&auto=format&fit=crop'}];
          const ITEMS=[{id:1,cat:'burgers',code:'BZ-101',name:'Zinger Burger',price:550,img:'https://images.unsplash.com/photo-1550547660-d9450f859349?q=80&w=400&auto=format&fit=crop'},
                       {id:2,cat:'burgers',code:'BB-102',name:'Beef Burger',price:620,img:'https://images.unsplash.com/photo-1568901346375-23c9450c58cd?q=80&w=400&auto=format&fit=crop'},
                       {id:3,cat:'burgers',code:'CB-103',name:'Cheese Burger',price:580,img:'https://images.unsplash.com/photo-1553979081-13eab165c24b?q=80&w=400&auto=format&fit=crop'},
                       {id:4,cat:'pizzas',code:'PP-201',name:'Pepperoni Pizza',price:1200,img:'https://images.unsplash.com/photo-1548365328-9f547fb09550?q=80&w=400&auto=format&fit=crop'},
                       {id:5,cat:'pizzas',code:'FP-202',name:'Fajita Pizza',price:1300,img:'https://images.unsplash.com/photo-1460306855393-0410f61241c7?q=80&w=400&auto=format&fit=crop'},
                       {id:6,cat:'sides',code:'FR-301',name:'Fries',price:250,img:'https://images.unsplash.com/photo-1511690656952-34342bb7c2f2?q=80&w=400&auto=format&fit=crop'},
                       {id:7,cat:'drinks',code:'CL-401',name:'Cola 500ml',price:120,img:'https://images.unsplash.com/photo-1511920170033-f8396924c348?q=80&w=400&auto=format&fit=crop'},
                       {id:8,cat:'dessert',code:'DL-501',name:'Chocolate Lava',price:480,img:'https://images.unsplash.com/photo-1499636136210-6f4ee915583e?q=80&w=400&auto=format&fit=crop'}];
          const WAITERS=['Ali','Bilal','Hamza','Imran','Sara','Waqas'];

          /* DOM refs */
          const catGrid=document.getElementById('catGrid');
          const leftItemsTitle=document.getElementById('leftItemsTitle');
          const leftItemsGrid=document.getElementById('leftItemsGrid');
          const sortSel=document.getElementById('sortSel');
          const itemSearchTop=document.getElementById('itemSearchTop');
          const itemSearchBottom=document.getElementById('itemSearchBottom');
          
          
          const tDiscType=document.getElementById('tDiscType');
          
          const tTaxType=document.getElementById('tTaxType');
          
          const payMode=document.getElementById('payMode');
          const waiterSel=document.getElementById('waiterSel');
          const addWaiterBtn=document.getElementById('addWaiterBtn');
          const addCustomerBtn=document.getElementById('addCustomerBtn');
          const customer=document.getElementById('customer');
          const fsBtn=document.getElementById('fsBtn');
          const posApp=document.getElementById('posApp');
          const acModify=document.getElementById('acModify');
          const acDelete=document.getElementById('acDelete');
          const acKOT=document.getElementById('acKOT');
          const acPrint=document.getElementById('acPrint');
          const acHold=document.getElementById('acHold');
          const acRetrieve=document.getElementById('acRetrieve');
          const holdModal=document.getElementById('holdModal');
          const retrieveModal=document.getElementById('retrieveModal');
          const holdListBody=document.getElementById('holdListBody');
          const btnHoldOnly=document.getElementById('btnHoldOnly');
          const btnHoldPrint=document.getElementById('btnHoldPrint');
          const orderNoEl=document.getElementById('orderNo');

          /* Clock */
          function tick(){ const n=new Date(); document.getElementById('nowTime').textContent=n.toLocaleTimeString(); document.getElementById('nowDate').textContent=n.toLocaleDateString(); }
          setInterval(tick,1000); tick();

          /* Waiters */
          function refreshWaiters(){ waiterSel.innerHTML='<option value="">Select Waiter</option>'+WAITERS.map(w=>`<option value="${w}">${w}</option>`).join('');}
          refreshWaiters();
          addWaiterBtn.addEventListener('click',()=>{ const name=prompt('New waiter name?'); if(!name) return; WAITERS.push(name); refreshWaiters(); waiterSel.value=name; });
          addCustomerBtn.addEventListener('click',()=>{ const name=prompt('Customer name?'); if(!name) return; customer.value=name; });

          /* Fullscreen */
          fsBtn.addEventListener('click',async ()=>{
            try{
              if(!document.fullscreenElement){ await posApp.requestFullscreen(); fsBtn.innerHTML='<i class="fa-solid fa-down-left-and-up-right-to-center"></i>'; fsBtn.title='Exit Full Screen'; }
              else{ await document.exitFullscreen(); fsBtn.innerHTML='<i class="fa-solid fa-up-right-and-down-left-from-center"></i>'; fsBtn.title='Full Screen'; }
            }catch(e){}
          });

        const categories = @Html.Raw(Json.Serialize(ViewBag.CategoriesForJs));
        const basePath = '@Url.Content("~")';

        function renderCats() {
            catGrid.innerHTML = categories.map(c => `
                <button class="cat-btn" data-id="${c.id}">
                    <img class="cat-thumb" src="${c.imagePath ? basePath + c.imagePath : '/images/default.png'}" alt="${c.name}">
                    <span class="cat-title">${c.name}</span>
                    <span class="cat-count">${c.items.length || 0}</span>
                </button>
            `).join('');
        }
        renderCats();

        let currentCat = categories[0]?.id || ''; // start with first category
        renderLeftItems();

        catGrid.addEventListener('click', e => {
            const b = e.target.closest('.cat-btn');
            if (!b) return;
            currentCat = parseInt(b.dataset.id);
            renderLeftItems();
        });

        function renderLeftItems() {
            const selectedCategory = categories.find(c => c.id === currentCat);

            if (!selectedCategory) {
                leftItemsTitle.textContent = 'Items';
                leftItemsGrid.innerHTML = '';
                return;
            }

            leftItemsTitle.textContent = selectedCategory.name;

            leftItemsGrid.innerHTML = (selectedCategory.items || []).map(it => `
                <div class="li-card" data-id="${it.id}">
                    <img class="li-thumb" src="${it.imagePath ? basePath + it.imagePath : '/images/default.png'}" alt="${it.itemName}">
                    <div style="min-width:0">
                        <div class="li-name">${it.itemName} <small style="color:#64748b">(${it.itemCode})</small></div>
                        <div class="li-meta">
                            <span class="price-badge"><i class="fa-solid fa-sack-dollar"></i> ${it.salePrice.toFixed(0)}</span>
                            <span class="muted">#${it.quantity}</span>
                        </div>
                    </div>
                </div>
            `).join('');
        }

          /* Items + search name/code */
          function currentQuery(){ return (itemSearchTop.value||itemSearchBottom.value||'').toLowerCase().trim(); }
          function syncSearch(fromTop){ const v=fromTop?itemSearchTop.value:itemSearchBottom.value; (fromTop?itemSearchBottom:itemSearchTop).value=v; }
          itemSearchTop.addEventListener('input',()=>{ syncSearch(true); renderLeftItems(); });
          itemSearchBottom.addEventListener('input',()=>{ syncSearch(false); renderLeftItems(); });

          function filteredSortedLeft(){
            const q=currentQuery();
            let list=ITEMS.filter(it=>it.cat===currentCat && (!q || it.name.toLowerCase().includes(q) || (it.code||'').toLowerCase().includes(q)));
            const s=sortSel.value;
            if(s==='name') list.sort((a,b)=>a.name.localeCompare(b.name));
            if(s==='price_asc') list.sort((a,b)=>a.price-b.price);
            if(s==='price_desc') list.sort((a,b)=>b.price-a.price);
            return list;
          }


          /* Cart */
                  

        leftItemsGrid.addEventListener('click', e => {
            const card = e.target.closest('.li-card');
            if (!card) return;

            const itemId = +card.dataset.id;

            // Find the item from the selected category
            const selectedCategory = categories.find(c => c.id === currentCat);
            if (!selectedCategory) return;

            const it = selectedCategory.items.find(x => x.id === itemId);
            if (!it) return;

            // Check if item is already in the cart
            const ex = cart.find(x => x.id === itemId);
            if (ex) {
                ex.qty += 1;
            } else {
                cart.push({
                    id: itemId,
                    code: it.itemCode,
                    name: it.itemName,
                    price: it.salePrice,
                    qty: 1
                });
            }

            renderCart();
            recalc();
        });

          function renderCart(){
            if(!cart.length){ cartBody.innerHTML=`<div class="muted" style="padding:.6rem;">No items yet. Select from left to add.</div>`; return; }
            cartBody.innerHTML=cart.map((l,idx)=>`
              <div class="cart-row" data-idx="${idx}" data-item-id="${l.id}" data-code="${l.code||''}">
                <div class="cart-name">${l.name}</div>
                <div class="qty-wrap">
                  <button class="qty-btn" data-op="dec">−</button>
                  <input class="soft-input qty-input" type="number" step="1" min="1" value="${l.qty}">
                  <button class="qty-btn" data-op="inc">+</button>
                </div>
                <input class="price-input" type="number" step="0.01" value="${l.price.toFixed(2)}">
                <div class="line-total">${(l.qty*l.price).toFixed(2)}</div>
                <button class="remove-btn" title="Remove line"><i class="fa-regular fa-trash-can"></i></button>
              </div>`).join('');
          }
          cartBody.addEventListener('click',e=>{
            const row=e.target.closest('.cart-row'); if(!row) return; const idx=+row.dataset.idx;
            if(e.target.matches('.remove-btn, .remove-btn *')){ cart.splice(idx,1); renderCart(); recalc(); return; }
            if(e.target.matches('.qty-btn')){ const op=e.target.dataset.op; if(op==='inc') cart[idx].qty+=1; if(op==='dec') cart[idx].qty=Math.max(1,cart[idx].qty-1); renderCart(); recalc(); }
          });
          cartBody.addEventListener('input',e=>{
            const row=e.target.closest('.cart-row'); if(!row) return; const idx=+row.dataset.idx;
            if(e.target.matches('.qty-input')){ cart[idx].qty=Math.max(1, parseInt(e.target.value||'1',10)); row.querySelector('.line-total').textContent=(cart[idx].qty*cart[idx].price).toFixed(2); recalc(); }
            if(e.target.matches('.price-input')){ cart[idx].price=Math.max(0, parseFloat(e.target.value||'0')); row.querySelector('.line-total').textContent=(cart[idx].qty*cart[idx].price).toFixed(2); recalc(); }
          });

          
          [tDisc,tCash].forEach(el=> el.addEventListener('input', recalc));
          [tDiscType,tTax,tTaxType,payMode].forEach(el=>{ el.addEventListener('input',recalc); el.addEventListener('change',recalc); });

          /* Keypad */
          function padTarget(){
            const v=document.querySelector('input[name="padTarget"]:checked').value;
            if(v==='qty'){ const x=cartBody.querySelector('.cart-row:last-child .qty-input'); if(x) return x; }
            if(v==='price'){ const x=cartBody.querySelector('.cart-row:last-child .price-input'); if(x) return x; }
            if(v==='disc') return tDisc;
            if(v==='cash') return tCash;
            return tCash;
          }
          document.querySelector('.pad-grid').addEventListener('click',e=>{
            const b=e.target.closest('button'); if(!b) return; const key=b.dataset.key; const input=padTarget(); if(!input) return;
            if(key==='C'){ input.value=''; input.dispatchEvent(new Event('input')); return; }
            if(key==='⌫'){ input.value=(input.value||'').slice(0,-1); input.dispatchEvent(new Event('input')); return; }
            input.value=(input.value||'')+key; input.dispatchEvent(new Event('input'));
          });

          /* Order sequence */
          // let orderSeq=1001; function setNextOrderNo(){ orderNoEl.textContent=orderSeq; } setNextOrderNo();

          /* Print invoice-only */
          function buildInvoiceHTML(){
            const ordNo=orderNoEl.textContent;
            const waiter=waiterSel.value||'-';
            const cust=customer.value||'-';
            const tbl=document.getElementById('tableNo').value||'-';
            const mode=payMode.value||'-';
            const now=new Date().toLocaleString();
            const rows=Array.from(document.querySelectorAll('#cartBody .cart-row')).map(r=>{
              const name=r.querySelector('.cart-name')?.textContent||''; const qty=r.querySelector('.qty-input')?.value||'1';
              const price=r.querySelector('.price-input')?.value||'0.00'; const total=r.querySelector('.line-total')?.textContent||'0.00';
              return `<tr><td>${name}</td><td style="text-align:right">${qty}</td><td style="text-align:right">${Number(price).toFixed(2)}</td><td style="text-align:right">${Number(total).toFixed(2)}</td></tr>`;
            }).join('');
            const grand=tGrand.textContent||'0.00';
            return `
            <div style="font-family:ui-sans-serif,system-ui;max-width:720px">
              <h2 style="margin:0 0 8px 0">Invoice</h2>
              <div style="font-size:12px;color:#334155;margin-bottom:10px">${now}</div>
              <table style="width:100%;font-size:14px;margin-bottom:10px">
                <tr><td><b>Order #</b></td><td>${ordNo}</td><td><b>Table</b></td><td>${tbl}</td></tr>
                <tr><td><b>Waiter</b></td><td>${waiter}</td><td><b>Customer</b></td><td>${cust}</td></tr>
                <tr><td><b>Payment</b></td><td>${mode}</td><td></td><td></td></tr>
              </table>
              <table style="width:100%;border-collapse:collapse">
                <thead>
                  <tr>
                    <th style="text-align:left;border-bottom:1px solid #e5e7eb;padding:6px 0">Item</th>
                    <th style="text-align:right;border-bottom:1px solid #e5e7eb;padding:6px 0">Qty</th>
                    <th style="text-align:right;border-bottom:1px solid #e5e7eb;padding:6px 0">Price</th>
                    <th style="text-align:right;border-bottom:1px solid #e5e7eb;padding:6px 0">Total</th>
                  </tr>
                </thead>
                <tbody>${rows || `<tr><td colspan="4" style="padding:8px 0;color:#64748b">No items</td></tr>`}</tbody>
                <tfoot>
                  <tr>
                    <td colspan="3" style="text-align:right;padding-top:8px"><b>Grand Total</b></td>
                    <td style="text-align:right;padding-top:8px"><b>${Number(grand).toFixed(2)}</b></td>
                  </tr>
                </tfoot>
              </table>
            </div>`;
          }

          async function savePOS(printAfter = false) {
                  // Check only when printAfter is true
                if (printAfter && (!tCash.value || tCash.value.trim() === "")) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Required Field',
                        text: 'Please enter cash amount!',
                        confirmButtonColor: '#3085d6',
                    });
                    return; // stop further execution
                }

            // --- Totals ---
            const grandTotal = parseFloat(document.getElementById('tGrand')?.textContent.replace(/,/g,'') || 0);
            const tax = parseFloat(document.getElementById('tTax')?.value || 0);
            const taxType = document.getElementById('tTaxType')?.value || 'flat';
            const discount = parseFloat(document.getElementById('tDisc')?.value || 0);
            const discountType = document.getElementById('tDiscType')?.value || 'flat';
            const cash = parseFloat(document.getElementById('tCash')?.value || 0);
            const change = parseFloat(document.getElementById('tChange')?.value || 0);
            const payMode = document.getElementById('payMode')?.value || 'cash';

            // --- Customer ---
            const custId = parseInt(document.getElementById('customer')?.value || 0);

            // --- Order Meta ---
            const orderType = document.getElementById('orderType')?.value || 'dinein';
            const tableNo = document.getElementById('tableNo')?.value || '';
            const waiterId = document.getElementById('waiterSel')?.value || null;
            const orderNo = document.getElementById('orderNo')?.textContent || '';

            // --- Sale Items from cart rows ---
            const saleItems = Array.from(document.querySelectorAll('.cart-row')).map(row => {
                const qtyInput = row.querySelector('.qty-input');
                const priceInput = row.querySelector('.price-input');
                const qty = parseInt(qtyInput?.value || 0);
                const price = parseFloat(priceInput?.value || 0);
                return {
                    ItemId: parseInt(row.dataset.itemId),
                    Quantity: qty,
                    UnitPrice: price,
                    DiscountPercent: discount,
                    TaxAmount: tax,
                    LineTotal: +(qty*price).toFixed(2)
                };
            });

            if(!saleItems.length){
                Swal.fire({ icon:'warning', title:'No Items', text:'Please add at least one item to the cart!' });
                return;
            }

            // --- Prepare payload ---
            let payload = {
                InvoiceNumber: orderNo,
                SubTotal: grandTotal,
                Tax: parseFloat(document.querySelector('.gpos-tax')?.textContent.replace(/[₨,]/g,'')||0),
                Discount: discount,
                DiscountPercent: discount,
                DiscountLessAmount: discount,
                SaleType: "Sale",
                Total: grandTotal,
                custId: custId,
                tender_amount: cash,
                Payment: {
                    Amount: cash,
                    PaymentMethod: payMode,
                    Change: Math.max(cash - grandTotal, 0),
                },
                SaleItems: saleItems
            };

            try {
                const endpoint = printAfter ? '/Sales/SaveSale' : '/Sales/KOTSale';
                const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if(response.ok){
                    const result = await response.json();

                  

                    if(printAfter){ window.open(`/Sales/Receipt/${result.id}`,'_blank'); }
                    else
                    {
                        window.open(`/Sales/KOTReceipt/${result.id}`,'_blank');
                    }

                     window.location.reload();
                } else {
                    const error = await response.json();
                    toast(error.Message || "Failed to save order", 'error', 3000);
                }
            } catch(err) {
                console.error("Error saving POS order:", err);
                Swal.fire({ icon:'error', title:'Error', text:'Something went wrong while saving the order.' });
            }
        }

          
          
          
          
          // function printInvoiceOnly(){
          //   const area=document.getElementById('printArea');
          //   area.innerHTML=buildInvoiceHTML(); area.style.display='block'; window.print();
          //   setTimeout(()=>{ area.style.display='none'; area.innerHTML=''; },50);
          // }

          /* Hold/Retrieve helpers */
          function openHoldModal(){ holdModal.hidden=false; }
          function openRetrieveModal(){ retrieveModal.hidden=false; }
          document.querySelectorAll('.modal-close').forEach(b=>b.addEventListener('click',e=>{
            const t=e.currentTarget.dataset.close; if(t==='hold') holdModal.hidden=true; if(t==='retrieve') retrieveModal.hidden=true;
          }));
          // holdModal.querySelector('.modal-backdrop').addEventListener('click',()=>holdModal.hidden=true);
          // retrieveModal.querySelector('.modal-backdrop').addEventListener('click',()=>retrieveModal.hidden=true);

          function buildHoldPayload(printAlso){
            const waiter=waiterSel.value||''; const cust=customer.value||''; const pmode=payMode.value; const tbl=document.getElementById('tableNo').value||'';
            const ordNo=Number(orderNoEl.textContent||'0')||0;
            const taxVal=parseFloat(tTax.value||'0')||0; const taxType=tTaxType.value;
            const discVal=parseFloat(tDisc.value||'0')||0; const discType=tDiscType.value;

            const items=Array.from(document.querySelectorAll('#cartBody .cart-row')).map((row,idx)=>{
              const name=row.querySelector('.cart-name')?.textContent?.trim()||'';
              const qty=parseFloat(row.querySelector('.qty-input')?.value||'1')||1;
              const price=parseFloat(row.querySelector('.price-input')?.value||'0')||0;
              const line=parseFloat(row.querySelector('.line-total')?.textContent||(qty*price))||(qty*price);
              const itemId=Number(row.dataset.itemId||0); const code=row.dataset.code||'';
              return {id:idx+1,itemId,code,name,qty,price,lineTotal:line};
            });

            const sub=items.reduce((a,b)=>a+(b.qty*b.price),0);
            const dAmt=(discType==='percent')?(sub*discVal/100):discVal;
            const txBase=Math.max(0, sub - dAmt);
            const txAmt=(taxType==='percent')?(txBase*taxVal/100):taxVal;
            const grand=Math.max(0, txBase + txAmt);

            return { orderNo:ordNo, waiter, customer:cust, tableNo:tbl, payMode:pmode,
                     taxValue:taxVal, taxType, discountValue:discVal, discountType:discType,
                     grandTotal:grand, items, printAlso };
          }

          async function doHoldBackend(printAlso){
            if(!document.querySelector('#cartBody .cart-row')){ alert('Nothing to hold. Please add items.'); return; }
            const payload=buildHoldPayload(printAlso);
            try{
              const data=await req('/Sales/Hold',payload,'POST');
              holdModal.hidden=true;
              cart=[]; renderCart(); tDisc.value=''; tTax.value=''; tCash.value=''; recalc();
              orderSeq+=1; setNextOrderNo();
              if(payload.printAlso) printInvoiceOnly();
              alert(`Held: ${data.invoiceId} (Order #${data.orderNo})`);
            }catch(e){ alert('Hold failed: '+e.message); }
          }

          // async function loadHeldList(){
          //   try{
          //     const list=await req('/Sales/Hold/List',null,'GET');
          //     if(!Array.isArray(list)||!list.length){ holdListBody.innerHTML=`<tr class="hold-row"><td colspan="7" style="text-align:center;padding:16px;color:#64748b">No held invoices.</td></tr>`; return; }
          //     holdListBody.innerHTML=list.slice().reverse().map(h=>{
          //       const prv=(h.items||[]).slice(0,2).map(i=>`${i.name}×${i.qty}`).join(', ')+((h.items||[]).length>2?` +${(h.items||[]).length-2} more`:``);
          //       return `<tr class="hold-row" data-id="${h.invoiceId}">
          //         <td><span class="pill">${h.invoiceId}</span></td>
          //         <td>${h.orderNo}</td><td>${h.waiter||'-'}</td><td>${h.dateTime}</td>
          //         <td title="${(h.items||[]).map(i=>i.name+'×'+i.qty).join(', ')}">${prv}</td>
          //         <td><b>${Number(h.total||0).toFixed(2)}</b></td>
          //         <td style="display:flex;gap:6px">
          //           <button class="icon-btn btn-load" title="Load"><i class="fa-regular fa-pen-to-square"></i></button>
          //           <button class="icon-btn btn-delete" title="Delete"><i class="fa-regular fa-trash-can"></i></button>
          //         </td></tr>`;
          //     }).join('');
          //   }catch(e){ holdListBody.innerHTML=`<tr class="hold-row"><td colspan="7" style="text-align:center;padding:16px;color:#ef4444">Failed to load: ${e.message}</td></tr>`; }
          // }

          /* Actions */
          acModify.addEventListener('click',()=> alert('Modify dialog (wire backend).'));
          acDelete.addEventListener('click',()=>{ if(confirm('Delete this order?')){ cart=[]; renderCart(); tDisc.value=''; tTax.value=''; tCash.value=''; recalc(); } });
          acKOT.addEventListener('click',function() { savePOS(false); }); // can swap to KOT template if needed
          acPrint.addEventListener('click', function() { savePOS(true); });
          // acHold.addEventListener('click', ()=> openHoldModal());
          // acRetrieve.addEventListener('click', ()=>{ openRetrieveModal(); loadHeldList(); });

          // btnHoldOnly.addEventListener('click', ()=> doHoldBackend(false));
          btnHoldPrint.addEventListener('click', ()=> doHoldBackend(true));

          // holdListBody.addEventListener('click',async e=>{
          //   const row=e.target.closest('tr.hold-row'); if(!row) return; const id=row.dataset.id;
          //   if(e.target.closest('.btn-load')){
          //     try{
          //       const data=await req(`/Sales/Hold/${encodeURIComponent(id)}`,null,'GET');
          //       cart=(data.items||[]).map((it,i)=>({id:it.itemId||i+1,code:it.code||'',name:it.name,price:it.price,qty:it.qty}));
          //       renderCart(); recalc();
          //       waiterSel.value=data.waiter||''; customer.value=data.customer||''; document.getElementById('tableNo').value=data.tableNo||'';
          //       orderSeq=data.orderNo||orderSeq; setNextOrderNo();
          //       retrieveModal.hidden=true;
          //     }catch(err){ alert('Load failed: '+err.message); }
          //     return;
          //   }
          //   if(e.target.closest('.btn-delete')){
          //     if(!confirm(`Delete hold ${id}?`)) return;
          //     try{ await req(`/Sales/Hold/${encodeURIComponent(id)}`,null,'DELETE'); row.remove();
          //       if(!holdListBody.querySelector('tr')) holdListBody.innerHTML=`<tr class="hold-row"><td colspan="7" style="text-align:center;padding:16px;color:#64748b">No held invoices.</td></tr>`;
          //     }catch(err){ alert('Delete failed: '+err.message); }
          //   }
          // });

          /* Init */
          renderCart(); recalc();
        })();
    </script>
}
