@Html.ValidationSummary(true, "", new { @class = "text-danger mb-2" })

@model GSoftPosNew.Models.Customer
@using Microsoft.AspNetCore.Http
@{
    ViewData["Title"] = "Add Customer";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // If model.Id > 0 => we are editing
    var isEdit = Model != null && Model.Id > 0;
}
<link href="~/css/customer.css" rel="stylesheet" asp-append-version="true" />

<!-- Breadcrumb Bar -->
<div class="breadcrumb-bar d-flex align-items-center mb-4 p-3 rounded shadow-sm" style="background: linear-gradient(90deg,#17408d 40%,#68eacc 100%);">
    <a asp-controller="Dashboard" asp-action="Index" class="breadcrumb-link text-white fw-semibold me-2" style="text-decoration:none;">
        <i class="fa fa-arrow-left me-2"></i> Dashboard
    </a>
    <i class="fa fa-chevron-right mx-2 separator-icon text-white-50"></i>
    <h4 class="breadcrumb-title m-0 text-white">@ViewData["Title"]</h4>
</div>

<div class="container py-4">

    @* Center toast (auto) *@
    @if (TempData["Error"] != null)
    {
        <div id="errorToast" style="
             position:fixed; top:50%; left:50%; transform:translate(-50%,-50%);
             background:#f8d7da; color:#721c24; border:1px solid #f5c6cb;
             padding:16px 24px; border-radius:16px; z-index:6000;
             box-shadow:0 18px 40px rgba(0,0,0,.18); font-weight:700;">
            <i class="fa fa-times-circle me-2"></i>
            @TempData["Error"]
        </div>
    }


    <div class="row justify-content-center">
        <div class="col-xl-10 col-lg-11 col-md-12">

            <!-- Add/Edit Customer Form -->
            <div class="card shadow-lg border-0 rounded-4 mb-5">
                <div class="card-header text-white d-flex align-items-center rounded-top-4"
                     style="background: linear-gradient(92deg, #18608c 60%, #89f7fe 100%);">
                    <i class="fa fa-user-plus fa-lg me-2"></i>
                    <span class="fw-bold">@((isEdit ? "Edit" : "Add")) Customer</span>
                </div>

                @if (TempData["Success"] != null)
                {
                    <div class="alert alert-success shadow-sm" id="alert-success">
                        @TempData["Success"]
                    </div>

                    
                }
                
                @if (TempData["DeleteSuccess"] != null)
                {
                    <div class="alert alert-danger shadow-sm" id="alert-danger">
                        @TempData["DeleteSuccess"]
                    </div>

                    
                }

                <div class="card-body bg-light rounded-bottom-4">
                    @using (Html.BeginForm(isEdit ? "Edit" : "Create", "Customer", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(m => m.Id)
                        @Html.ValidationSummary(true, "", new { @class = "text-danger mb-2" })

                        <div class="row g-3">
                            <!-- REQUIRED: Customer Name -->
                            <div class="col-md-6">
                                <label class="form-label">
                                    <i class="fa fa-user text-primary me-1"></i>Customer Name *
                                </label>
                                @Html.TextBoxFor(m => m.CustomerName, new { @class = "form-control", placeholder = "Full name" })
                                @Html.ValidationMessageFor(m => m.CustomerName, "", new { @class = "text-danger" })
                            </div>

                            <!-- OPTIONAL: Father Name -->
                            <div class="col-md-6">
                                <label class="form-label">
                                    <i class="fa fa-user-friends text-info me-1"></i>Father Name (optional)
                                </label>
                                @Html.TextBoxFor(m => m.FatherName, new { @class = "form-control", placeholder = "Father/Guardian name" })
                            </div>

                            <!-- OPTIONAL: NIC -->
                            <div class="col-md-4">
                                <label class="form-label">
                                    <i class="fa fa-id-card text-success me-1"></i>NIC (optional)
                                </label>
                                @Html.TextBoxFor(m => m.NIC, new { @class = "form-control", placeholder = "NIC / CNIC" })
                            </div>

                            <!-- REQUIRED: Contact Number -->
                            <div class="col-md-4">
                                <label class="form-label">
                                    <i class="fa fa-phone text-warning me-1"></i>Contact Number *
                                </label>
                                @Html.TextBoxFor(m => m.ContactNumber, new { @class = "form-control", placeholder = "03xx-xxxxxxx" })
                                @Html.ValidationMessageFor(m => m.ContactNumber, "", new { @class = "text-danger" })
                            </div>

                            <!-- OPTIONAL: Opening Balance -->
                            <div class="col-md-4">
                                <label class="form-label">
                                    <i class="fa fa-wallet text-primary me-1"></i>Opening Balance (optional)
                                </label>
                                @Html.TextBoxFor(m => m.OpeningBalance, new { @class = "form-control", type = "number", step = "0.01", placeholder = "0.00" })
                            </div>

                            <!-- REQUIRED: Address Line 1 -->
                            <div class="col-md-6">
                                <label class="form-label">
                                    <i class="fa fa-map-marker-alt text-danger me-1"></i>Address Line 1 *
                                </label>
                                @Html.TextAreaFor(m => m.Address1, new { @class = "form-control", rows = 2, placeholder = "Street, City" })
                                @Html.ValidationMessageFor(m => m.Address1, "", new { @class = "text-danger" })
                            </div>

                            <!-- OPTIONAL: Address Line 2 -->
                            <div class="col-md-6">
                                <label class="form-label">
                                    <i class="fa fa-map-marked-alt text-success me-1"></i>Address Line 2 (optional)
                                </label>
                                @Html.TextAreaFor(m => m.Address2, new { @class = "form-control", rows = 2, placeholder = "Apartment, Landmark" })
                            </div>

                            <!-- OPTIONAL: Email -->
                            <div class="col-md-6">
                                <label class="form-label">
                                    <i class="fa fa-envelope text-warning me-1"></i>Email (optional)
                                </label>
                                @Html.TextBoxFor(m => m.Email, new { @class = "form-control", type = "email", placeholder = "name@example.com" })
                            </div>

                            <!-- OPTIONAL: Website -->
                            <div class="col-md-6">
                                <label class="form-label">
                                    <i class="fa fa-globe text-info me-1"></i>Website (optional)
                                </label>
                                @Html.TextBoxFor(m => m.Website, new { @class = "form-control", placeholder = "https://example.com" })
                            </div>
                        </div>

                        <div class="mt-3">
                            <label class="btn btn-outline-primary rounded-pill px-4 shadow-sm">
                                <i class="fa fa-image me-1"></i> Upload Picture (optional)
                                <input type="file" name="PictureFile" accept=".jpg,.jpeg,.png" hidden />
                            </label>
                        </div>

                        <!-- Buttons: Save/Update + Print + Clear -->
                        <div class="mt-4 d-flex justify-content-between align-items-center">
                            <div>
                                <a class="btn btn-light border rounded-pill shadow-sm"
                                   title="Clear form"
                                   href="@Url.Action("Create", "Customer")">
                                    <i class="fa fa-broom me-1"></i> Clear Form
                                </a>
                            </div>
                            <div class="text-end">
                                @if (isEdit)
                                {
                                    <button type="submit" class="btn btn-success btn-lg rounded-pill shadow me-2">
                                        <i class="fa fa-save me-1"></i> Update Customer
                                    </button>
                                    <a class="btn btn-secondary btn-lg rounded-pill shadow me-2"
                                       title="Cancel editing"
                                       href="@Url.Action("Create", "Customer")">
                                        <i class="fa fa-times me-1"></i> Cancel
                                    </a>
                                    <button type="button" class="btn btn-info btn-lg rounded-pill shadow"
                                            title="Print this page" onclick="window.print();">
                                        <i class="fa fa-print me-1"></i> Print
                                    </button>
                                }
                                else
                                {
                                    <button type="submit" class="btn btn-success btn-lg rounded-pill shadow me-2">
                                        <i class="fa fa-save me-1"></i> Save Customer
                                    </button>
                                    <button type="button" class="btn btn-warning btn-lg rounded-pill shadow me-2" title="Edit (select from list below)" disabled>
                                        <i class="fa fa-edit me-1"></i> Edit
                                    </button>
                                    <button type="button" class="btn btn-info btn-lg rounded-pill shadow"
                                            title="Print this page" onclick="window.print();">
                                        <i class="fa fa-print me-1"></i> Print
                                    </button>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Customer List -->
            <div class="card shadow-lg border-0 rounded-4 mt-5">
                <div class="card-header text-white d-flex align-items-center justify-content-between rounded-top-4"
                     style="background: linear-gradient(92deg, #474bff 60%, #38e4ae 100%);">
                    <div>
                        <i class="fa fa-list fa-lg me-2"></i>
                        <span class="fw-bold">All Customers</span>
                    </div>

                    <!-- Search box -->
                    <div class="w-auto">
                        <div class="input-group input-group-sm">
                            <span class="input-group-text bg-white">
                                <i class="fa fa-search"></i>
                            </span>
                            <input id="customerSearch" type="text" class="form-control" placeholder="Search by name, contact, address">
                            <button id="clearSearch" type="button" class="btn btn-outline-light border-0 ms-2" title="Clear">
                                <i class="fa fa-times"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="card-body bg-white rounded-bottom-4 p-0">
                    <div class="table-responsive">
                        <table class="table table-striped mb-0 align-middle" id="customersTable" tabindex="0">
                            <thead class="table-light">
                                <tr>
                                    <th>Name</th>
                                    <th>Father</th>
                                    <th>NIC</th>
                                    <th>Contact</th>
                                    <th>Balance</th>
                                    <th class="text-end" style="width:120px;">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var c in ViewBag.CustomerList as List<GSoftPosNew.Models.Customer>)
                                {
                                    var editUrl = Url.Action("Edit", "Customer", new { id = c.Id });
                                    <tr data-id="@c.Id"
                                        data-edit-url="@editUrl"
                                        data-customer-name="@c.CustomerName"
                                        data-customer-contact="@c.ContactNumber"
                                        data-customer-address="@c.Address1">
                                        <td>@c.CustomerName</td>
                                        <td>@c.FatherName</td>
                                        <td>@c.NIC</td>
                                        <td>@c.ContactNumber</td>
                                        <td>@c.OpeningBalance</td>
                                        <td class="text-end">
                                            <!-- Edit -->
                                            <a class="btn btn-sm btn-outline-primary me-1"
                                               title="Edit"
                                               href="@editUrl">
                                                <i class="fa fa-pen"></i>
                                            </a>

                                            <!-- Delete (POST) -->
                                            <form method="post"
                                                  action="@Url.Action("Delete","Customer", new { id = c.Id })"
                                                  class="d-inline"
                                                  onsubmit="return confirm('Delete this customer: @c.CustomerName ?');">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete">
                                                    <i class="fa fa-trash"></i>
                                                </button>
                                            </form>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>
@section Scripts {
    <script>
        // Run after DOM is ready
        setTimeout(() => {
            let alertBox = document.getElementById("alert-success");
            if (alertBox) {
                alertBox.style.display = "none";
            }
        }, 2000);
        
        setTimeout(() => {
            let alertBox = document.getElementById("alert-danger");
            if (alertBox) {
                alertBox.style.display = "none"; 
            }
        }, 2000); // 2 seconds
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
          /* ------------------------- LIVE SEARCH ------------------------- */
          var search = document.getElementById('customerSearch');
          var clearBtn = document.getElementById('clearSearch');
          var table = document.getElementById('customersTable');
          var tbody = table ? table.querySelector('tbody') : null;

          function allRows() {
            return Array.from(document.querySelectorAll('#customersTable tbody tr'));
          }
          function visibleRows() {
            return allRows().filter(function(r){ return r.style.display !== 'none'; });
          }
          function getSelectedIndex() {
            var rowsV = visibleRows();
            var sel = document.querySelector('#customersTable tbody tr.row-selected');
            return sel ? rowsV.indexOf(sel) : -1;
          }
          function clearSelection() {
            allRows().forEach(function(r){ r.classList.remove('row-selected'); });
          }
          function selectRow(row) {
            if (!row || row.style.display === 'none') return;
            clearSelection();
            row.classList.add('row-selected');
            row.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
          }
          function selectByIndex(idx) {
            var rowsV = visibleRows();
            if (!rowsV.length) return;
            if (idx < 0) idx = 0;
            if (idx >= rowsV.length) idx = rowsV.length - 1;
            selectRow(rowsV[idx]);
          }
          function openEditSelected() {
            var sel = document.querySelector('#customersTable tbody tr.row-selected');
            if (sel && sel.dataset.editUrl) window.location = sel.dataset.editUrl;
          }

          function applyFilter() {
            var q = (search && search.value || '').toLowerCase().trim();
            allRows().forEach(function(r){
              var text = (
                (r.dataset.customerName || '') + ' ' +
                (r.dataset.customerContact || '') + ' ' +
                (r.dataset.customerAddress || '')
              ).toLowerCase();
              r.style.display = text.indexOf(q) >= 0 ? '' : 'none';
              if (r.style.display === 'none') r.classList.remove('row-hover','row-selected');
            });
            // filter ke baad pehli visible row select kara do (optional)
            clearSelection();
            selectByIndex(0);
          }

          if (search) search.addEventListener('input', applyFilter);
          if (clearBtn) {
            clearBtn.addEventListener('click', function () {
              search.value = '';
              applyFilter();
              search.focus();
            });
          }

          /* --------------- Event delegation: hover + click + dblclick --------------- */
          if (tbody) {
            // hover (CSS :hover already), JS hover class optional:
            tbody.addEventListener('mouseover', function(e){
              var tr = e.target.closest('tr');
              if (!tr || tr.parentNode !== tbody) return;
              tr.classList.add('row-hover');
            });
            tbody.addEventListener('mouseout', function(e){
              var tr = e.target.closest('tr');
              if (!tr || tr.parentNode !== tbody) return;
              tr.classList.remove('row-hover');
            });

            // single left-click -> select
            tbody.addEventListener('click', function(e){
              if (e.target.closest('a,button,form')) return; // ignore action buttons
              var tr = e.target.closest('tr');
              if (!tr || tr.parentNode !== tbody) return;
              selectRow(tr);
              // table ko focus de dein so arrows kaam karein
              if (table) table.focus();
            });

            // double-click -> edit
            tbody.addEventListener('dblclick', function(e){
              if (e.target.closest('a,button,form')) return;
              var tr = e.target.closest('tr');
              if (!tr || tr.parentNode !== tbody) return;
              selectRow(tr);
              openEditSelected();
            });
          }

          /* ------------------------- Keyboard nav ------------------------- */
          if (table) {
            table.setAttribute('tabindex','0');
            // page load pe thoda delay dekar table focus + first row select
            setTimeout(function(){
              table.focus();
              selectByIndex(getSelectedIndex() === -1 ? 0 : getSelectedIndex());
            }, 50);

            table.addEventListener('keydown', function(e){
              var key = e.key;
              if (key === 'ArrowDown') {
                e.preventDefault();
                var idx = getSelectedIndex();
                selectByIndex(idx + 1);
              } else if (key === 'ArrowUp') {
                e.preventDefault();
                var idx = getSelectedIndex();
                selectByIndex(idx - 1);
              } else if (key === 'Enter') {
                e.preventDefault();
                openEditSelected();
              } else if (key === 'Escape') {
                clearSelection();
              }
            });
          }

          // initial filter/selection once
          applyFilter();
        });

               
        document.addEventListener('DOMContentLoaded', function () {
          var eToast = document.getElementById('errorToast');
          if (eToast) {
            setTimeout(function () {
              eToast.style.transition = 'opacity .6s ease';
              eToast.style.opacity = '0';
              setTimeout(function(){
                if (eToast && eToast.parentNode) eToast.parentNode.removeChild(eToast);
              }, 650);
            }, 3000);
          }
        });
   

    </script>
}

