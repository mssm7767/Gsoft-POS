@model List<GSoftPosNew.ViewModels.InventoryItemData>

<div class="report-container">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h4><i class="fas fa-dollar-sign me-2"></i>Stock Valuation Report</h4>
            <div>
                <span class="me-3">Total Value: <strong>@Model.Sum(i => i.StockValue).ToString("C")</strong></span>
                <button class="btn btn-light btn-sm">
                    <i class="fas fa-print me-1"></i> Print
                </button>
            </div>
        </div>
        <div class="card-body">
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="chart-container" style="height: 300px;">
                        <canvas id="categoryValueChart"></canvas>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="chart-container" style="height: 300px;">
                        <canvas id="stockStatusChart"></canvas>
                    </div>
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-striped">
                    <thead class="table-light">
                        <tr>
                            <th>Item Code</th>
                            <th>Item Name</th>
                            <th>Category</th>
                            <th class="text-end">Qty On Hand</th>
                            <th class="text-end">Cost Price</th>
                            <th class="text-end">Sale Price</th>
                            <th class="text-end">Stock Value</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.ItemCode</td>
                                <td>@item.ItemName</td>
                                <td>@item.Category</td>
                                <td class="text-end">@item.Quantity</td>
                                <td class="text-end">@item.CostPrice.ToString("C")</td>
                                <td class="text-end">@item.SalePrice.ToString("C")</td>
                                <td class="text-end">@item.StockValue.ToString("C")</td>
                                <td>
                                    <span class="badge @(item.Status == "Out of Stock" ? "bg-danger" :
                                                                                        item.Status == "Low Stock" ? "bg-warning text-dark" : "bg-success")">
                                    @item.Status
                                </span>
                            </td>
                        </tr>
                                                }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Category Value Chart
        const categoryCtx = document.getElementById('categoryValueChart').getContext('2d');
        const categories = @Json.Serialize(Model.GroupBy(i => i.Category)
                    .Select(g => new { Category = g.Key, Value = g.Sum(i => i.StockValue) }));

    new Chart(categoryCtx, {
        type: 'doughnut',
        data: {
            labels: categories.map(c => c.Category),
            datasets: [{
                data: categories.map(c => c.Value),
                backgroundColor: [
                    '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'
                ]
            }]
        },
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: 'Value by Category'
                }
            }
        }
    });

        // Stock Status Chart
        const statusCtx = document.getElementById('stockStatusChart').getContext('2d');
        const statusData = {
            labels: ['In Stock', 'Low Stock', 'Out of Stock'],
            datasets: [{
                data: [
                    @Model.Count(i => i.Status == "In Stock"),
                    @Model.Count(i => i.Status == "Low Stock"),
                    @Model.Count(i => i.Status == "Out of Stock")
                ],
                backgroundColor: [
                    '#28a745', '#ffc107', '#dc3545'
                ]
            }]
        };

        new Chart(statusCtx, {
            type: 'pie',
            data: statusData,
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Stock Status'
                    }
                }
            }
        });
    </script>
}